--- a/net/optifine/util/LinkedListTest.java
+++ b/net/optifine/util/LinkedListTest.java
@@ -1,6 +1,7 @@
 package net.optifine.util;
 
 import java.util.ArrayList;
+import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
 import net.optifine.render.VboRange;
@@ -78,23 +79,21 @@
         }
     }
 
-    private static void dbgLinkedList(LinkedList<VboRange> linkedList)
-    {
-        StringBuffer stringbuffer = new StringBuffer();
-
-        for (LinkedList.Node<VboRange> node : linkedList)
-        {
-            VboRange vborange = node.getItem();
-
-            if (stringbuffer.length() > 0)
-            {
-                stringbuffer.append(", ");
+    private static void dbgLinkedList(LinkedList<VboRange> linkedList) {
+        StringBuffer sb = new StringBuffer();
+        Iterator it = linkedList.iterator();
+        do {
+            if (!it.hasNext()) {
+                LinkedListTest.dbg((String)("List: " + sb));
+                return;
+            }
+            LinkedList.Node node = (LinkedList.Node)it.next();
+            VboRange range = (VboRange)node.getItem();
+            if (sb.length() > 0) {
+                sb.append(", ");
             }
-
-            stringbuffer.append(vborange.getPosition());
-        }
-
-        dbg("List: " + stringbuffer);
+            sb.append(range.getPosition());
+        } while (true);
     }
 
     private static void checkLinkedList(LinkedList<VboRange> linkedList, int used)
