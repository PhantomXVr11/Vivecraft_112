--- a/net/optifine/shaders/config/ShaderPackParser.java
+++ b/net/optifine/shaders/config/ShaderPackParser.java
@@ -262,7 +262,7 @@
         String s = "profile.";
         List<ShaderProfile> list = new ArrayList<ShaderProfile>();
 
-        for (String s1 : props.keySet())
+        for (String s1 : (Set<String>)(Set<?>)props.keySet())
         {
             if (s1.startsWith(s))
             {
@@ -295,7 +295,7 @@
         Pattern pattern = Pattern.compile("program\\.([^.]+)\\.enabled");
         Map<String, IExpressionBool> map = new HashMap<String, IExpressionBool>();
 
-        for (String s1 : props.keySet())
+        for (String s1 : (Set<String>)(Set<?>)props.keySet())
         {
             Matcher matcher = pattern.matcher(s1);
 
@@ -506,7 +506,7 @@
 
                 if (s1.equals("<empty>"))
                 {
-                    list.add((Object)null);
+                    list.add((ShaderOption)null);
                 }
                 else if (set.contains(s1))
                 {
@@ -558,7 +558,7 @@
                         if (shaderoption == null)
                         {
                             Config.warn("[Shaders] Invalid option: " + s1 + ", key: " + key);
-                            list.add((Object)null);
+                            list.add((ShaderOption)null);
                         }
                         else
                         {
@@ -757,7 +757,7 @@
         Map<String, IExpression> map = new HashMap<String, IExpression>();
         List<CustomUniform> list = new ArrayList<CustomUniform>();
 
-        for (String s4 : props.keySet())
+        for (String s4 : (Set<String>)(Set<?>)props.keySet())
         {
             String[] astring = Config.tokenize(s4, ".");
 
@@ -854,7 +854,7 @@
 
     public static void parseAlphaStates(Properties props)
     {
-        for (String s : props.keySet())
+        for (String s : (Set<String>)(Set<?>)props.keySet())
         {
             String[] astring = Config.tokenize(s, ".");
 
@@ -918,7 +918,7 @@
 
     public static void parseBlendStates(Properties props)
     {
-        for (String s : props.keySet())
+        for (String s : (Set<String>)(Set<?>)props.keySet())
         {
             String[] astring = Config.tokenize(s, ".");
 
@@ -993,7 +993,7 @@
 
     public static void parseRenderScales(Properties props)
     {
-        for (String s : props.keySet())
+        for (String s : (Set<String>)(Set<?>)props.keySet())
         {
             String[] astring = Config.tokenize(s, ".");
 
@@ -1057,7 +1057,7 @@
 
     public static void parseBuffersFlip(Properties props)
     {
-        for (String s : props.keySet())
+        for (String s : (Set<String>)(Set<?>)props.keySet())
         {
             String[] astring = Config.tokenize(s, ".");
 
