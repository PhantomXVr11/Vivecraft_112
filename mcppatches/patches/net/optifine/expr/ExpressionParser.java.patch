--- a/net/optifine/expr/ExpressionParser.java
+++ b/net/optifine/expr/ExpressionParser.java
@@ -242,19 +242,19 @@
         }
     }
 
-    private FunctionType getFunctionType(Token token, Deque<Token> deque) throws ParseException
+    private FunctionType getFunctionType(Token tokenin, Deque<Token> deque) throws ParseException
     {
         Token token = deque.peek();
 
         if (token != null && token.getType() == TokenType.BRACKET_OPEN)
         {
-            FunctionType functiontype1 = FunctionType.parse(token.getText());
-            checkNull(functiontype1, "Unknown function: " + token);
+            FunctionType functiontype1 = FunctionType.parse(tokenin.getText());
+            checkNull(functiontype1, "Unknown function: " + tokenin);
             return functiontype1;
         }
         else
         {
-            FunctionType functiontype = FunctionType.parse(token.getText());
+            FunctionType functiontype = FunctionType.parse(tokenin.getText());
 
             if (functiontype == null)
             {
@@ -271,11 +271,11 @@
         }
     }
 
-    private IExpression makeFunction(FunctionType type, Deque<Token> deque) throws ParseException
+    private IExpression makeFunction(FunctionType type, Deque<Token> dequein) throws ParseException
     {
         if (type.getParameterCount(new IExpression[0]) == 0)
         {
-            Token token = deque.peek();
+            Token token = dequein.peek();
 
             if (token == null || token.getType() != TokenType.BRACKET_OPEN)
             {
@@ -283,19 +283,19 @@
             }
         }
 
-        Token token1 = deque.poll();
-        Deque<Token> deque = getGroup(deque, TokenType.BRACKET_CLOSE, true);
+        Token token1 = dequein.poll();
+        Deque<Token> deque = getGroup(dequein, TokenType.BRACKET_CLOSE, true);
         IExpression[] aiexpression = this.parseExpressions(deque);
         return makeFunction(type, aiexpression);
     }
 
-    private IExpression[] parseExpressions(Deque<Token> deque) throws ParseException
+    private IExpression[] parseExpressions(Deque<Token> dequein) throws ParseException
     {
         List<IExpression> list = new ArrayList<IExpression>();
 
         while (true)
         {
-            Deque<Token> deque = getGroup(deque, TokenType.COMMA, false);
+            Deque<Token> deque = getGroup(dequein, TokenType.COMMA, false);
             IExpression iexpression = this.parseInfix(deque);
 
             if (iexpression == null)
@@ -370,17 +370,17 @@
         }
     }
 
-    private IExpression makeBracketed(Token token, Deque<Token> deque) throws ParseException
+    private IExpression makeBracketed(Token token, Deque<Token> dequein) throws ParseException
     {
-        Deque<Token> deque = getGroup(deque, TokenType.BRACKET_CLOSE, true);
+        Deque<Token> deque = getGroup(dequein, TokenType.BRACKET_CLOSE, true);
         return this.parseInfix(deque);
     }
 
-    private static Deque<Token> getGroup(Deque<Token> deque, TokenType tokenTypeEnd, boolean tokenEndRequired) throws ParseException
+    private static Deque<Token> getGroup(Deque<Token> dequein, TokenType tokenTypeEnd, boolean tokenEndRequired) throws ParseException
     {
         Deque<Token> deque = new ArrayDeque<Token>();
         int i = 0;
-        Iterator iterator = deque.iterator();
+        Iterator iterator = dequein.iterator();
 
         while (iterator.hasNext())
         {
