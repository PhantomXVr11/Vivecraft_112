--- a/net/optifine/reflect/Reflector.java
+++ b/net/optifine/reflect/Reflector.java
@@ -1,20 +1,24 @@
 package net.optifine.reflect;
 
-import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
 import java.io.Reader;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
+import java.util.List;
 import java.util.Map;
 import java.util.Optional;
 import javax.vecmath.Matrix4f;
+
+import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
 import net.minecraft.block.Block;
 import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.state.IBlockProperties;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.client.Minecraft;
+import net.minecraft.client.gui.FontRenderer;
 import net.minecraft.client.gui.Gui;
+import net.minecraft.client.gui.GuiButton;
 import net.minecraft.client.gui.GuiEnchantment;
 import net.minecraft.client.gui.GuiHopper;
 import net.minecraft.client.gui.GuiMainMenu;
@@ -58,6 +62,8 @@
 import net.minecraft.client.model.ModelWither;
 import net.minecraft.client.model.ModelWolf;
 import net.minecraft.client.multiplayer.ChunkProviderClient;
+import net.minecraft.client.multiplayer.WorldClient;
+import net.minecraft.client.particle.ParticleManager;
 import net.minecraft.client.renderer.ActiveRenderInfo;
 import net.minecraft.client.renderer.EntityRenderer;
 import net.minecraft.client.renderer.block.model.IBakedModel;
@@ -73,8 +79,10 @@
 import net.minecraft.client.renderer.entity.RenderLivingBase;
 import net.minecraft.client.renderer.entity.RenderManager;
 import net.minecraft.client.renderer.entity.RenderMinecart;
+import net.minecraft.client.renderer.entity.RenderPlayer;
 import net.minecraft.client.renderer.entity.RenderShulkerBullet;
 import net.minecraft.client.renderer.entity.RenderWitherSkull;
+import net.minecraft.client.renderer.texture.TextureAtlasSprite;
 import net.minecraft.client.renderer.tileentity.TileEntityBannerRenderer;
 import net.minecraft.client.renderer.tileentity.TileEntityBedRenderer;
 import net.minecraft.client.renderer.tileentity.TileEntityChestRenderer;
@@ -82,7 +90,7 @@
 import net.minecraft.client.renderer.tileentity.TileEntityEnderChestRenderer;
 import net.minecraft.client.renderer.tileentity.TileEntityShulkerBoxRenderer;
 import net.minecraft.client.renderer.tileentity.TileEntitySignRenderer;
-import net.minecraft.client.renderer.tileentity.TileEntitySkullRenderer;
+import net.minecraft.client.renderer.tileentity.*;
 import net.minecraft.client.renderer.vertex.VertexFormatElement;
 import net.minecraft.client.resources.DefaultResourcePack;
 import net.minecraft.client.resources.IResourcePack;
@@ -94,13 +102,17 @@
 import net.minecraft.entity.EnumCreatureType;
 import net.minecraft.entity.item.EntityItemFrame;
 import net.minecraft.entity.passive.EntityVillager;
+import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.EntityPlayerMP;
+import net.minecraft.inventory.Container;
 import net.minecraft.inventory.IInventory;
 import net.minecraft.inventory.InventoryBasic;
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemArmor;
+import net.minecraft.item.ItemStack;
 import net.minecraft.potion.Potion;
 import net.minecraft.potion.PotionEffect;
+import net.minecraft.server.management.PlayerList;
 import net.minecraft.src.Config;
 import net.minecraft.tileentity.TileEntity;
 import net.minecraft.tileentity.TileEntityBeacon;
@@ -109,9 +121,16 @@
 import net.minecraft.tileentity.TileEntityFurnace;
 import net.minecraft.tileentity.TileEntityLockableLoot;
 import net.minecraft.util.BlockRenderLayer;
+import net.minecraft.util.DamageSource;
+import net.minecraft.util.EnumFacing;
+import net.minecraft.util.EnumHand;
 import net.minecraft.util.ResourceLocation;
+import net.minecraft.util.Session;
+import net.minecraft.util.math.AxisAlignedBB;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.ChunkPos;
+import net.minecraft.util.math.RayTraceResult;
+import net.minecraft.util.math.Vec3d;
 import net.minecraft.world.ChunkCache;
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.IWorldNameable;
@@ -151,6 +170,7 @@
     public static ReflectorClass Event = new ReflectorClass("net.minecraftforge.fml.common.eventhandler.Event");
     public static ReflectorMethod Event_isCanceled = new ReflectorMethod(Event, "isCanceled");
     public static ReflectorClass EventBus = new ReflectorClass("net.minecraftforge.fml.common.eventhandler.EventBus");
+
     public static ReflectorMethod EventBus_post = new ReflectorMethod(EventBus, "post");
     public static ReflectorClass Event_Result = new ReflectorClass("net.minecraftforge.fml.common.eventhandler.Event$Result");
     public static ReflectorField Event_Result_DENY = new ReflectorField(Event_Result, "DENY");
@@ -192,12 +212,15 @@
     public static ReflectorMethod ForgeBlock_getFogColor = new ReflectorMethod(ForgeBlock, "getFogColor");
     public static ReflectorMethod ForgeBlock_getLightOpacity = new ReflectorMethod(ForgeBlock, "getLightOpacity", new Class[] {IBlockState.class, IBlockAccess.class, BlockPos.class});
     public static ReflectorMethod ForgeBlock_getLightValue = new ReflectorMethod(ForgeBlock, "getLightValue", new Class[] {IBlockState.class, IBlockAccess.class, BlockPos.class});
+    public static ReflectorMethod ForgeBlock_getSlipperiness = new ReflectorMethod(ForgeBlock, "getSlipperiness");
     public static ReflectorMethod ForgeBlock_getSoundType = new ReflectorMethod(ForgeBlock, "getSoundType", new Class[] {IBlockState.class, World.class, BlockPos.class, Entity.class});
     public static ReflectorMethod ForgeBlock_hasTileEntity = new ReflectorMethod(ForgeBlock, "hasTileEntity", new Class[] {IBlockState.class});
     public static ReflectorMethod ForgeBlock_isAir = new ReflectorMethod(ForgeBlock, "isAir");
     public static ReflectorMethod ForgeBlock_isBed = new ReflectorMethod(ForgeBlock, "isBed");
     public static ReflectorMethod ForgeBlock_isBedFoot = new ReflectorMethod(ForgeBlock, "isBedFoot");
     public static ReflectorMethod ForgeBlock_isSideSolid = new ReflectorMethod(ForgeBlock, "isSideSolid");
+    public static ReflectorMethod ForgeBlock_removedByPlayer = new ReflectorMethod(ForgeBlock, "removedByPlayer");
+
     public static ReflectorClass ForgeIBakedModel = new ReflectorClass(IBakedModel.class);
     public static ReflectorMethod ForgeIBakedModel_isAmbientOcclusion2 = new ReflectorMethod(ForgeIBakedModel, "isAmbientOcclusion", new Class[] {IBlockState.class});
     public static ReflectorClass ForgeIBlockProperties = new ReflectorClass(IBlockProperties.class);
@@ -210,15 +233,27 @@
     public static ReflectorField ForgeEntity_capturedDrops = new ReflectorField(ForgeEntity, "capturedDrops");
     public static ReflectorMethod ForgeEntity_shouldRenderInPass = new ReflectorMethod(ForgeEntity, "shouldRenderInPass");
     public static ReflectorMethod ForgeEntity_shouldRiderSit = new ReflectorMethod(ForgeEntity, "shouldRiderSit");
+	public static ReflectorMethod ForgeEntity_getEntityData = new ReflectorMethod(ForgeEntity, "getEntityData");
+	public static ReflectorClass ForgeEntityPlayer = new ReflectorClass(EntityPlayer.class);
+	public static ReflectorField ForgeEntityPlayer_spawnChunkMap = new ReflectorField(ForgeEntityPlayer, "spawnChunkMap");
+	public static ReflectorField ForgeEntityPlayer_spawnForcedMap = new ReflectorField(ForgeEntityPlayer, "spawnForcedMap");
+	public static ReflectorField ForgeEntityPlayer_REACH_DISTANCE= new ReflectorField(ForgeEntityPlayer, "REACH_DISTANCE");
+
     public static ReflectorClass ForgeEventFactory = new ReflectorClass("net.minecraftforge.event.ForgeEventFactory");
     public static ReflectorMethod ForgeEventFactory_canEntitySpawn = new ReflectorMethod(ForgeEventFactory, "canEntitySpawn", new Class[] {EntityLiving.class, World.class, Float.TYPE, Float.TYPE, Float.TYPE, Boolean.TYPE});
     public static ReflectorMethod ForgeEventFactory_canEntityDespawn = new ReflectorMethod(ForgeEventFactory, "canEntityDespawn");
     public static ReflectorMethod ForgeEventFactory_doSpecialSpawn = new ReflectorMethod(ForgeEventFactory, "doSpecialSpawn", new Class[] {EntityLiving.class, World.class, Float.TYPE, Float.TYPE, Float.TYPE});
     public static ReflectorMethod ForgeEventFactory_getMaxSpawnPackSize = new ReflectorMethod(ForgeEventFactory, "getMaxSpawnPackSize");
-    public static ReflectorMethod ForgeEventFactory_getMobGriefingEvent = new ReflectorMethod(ForgeEventFactory, "getMobGriefingEvent");
     public static ReflectorMethod ForgeEventFactory_renderBlockOverlay = new ReflectorMethod(ForgeEventFactory, "renderBlockOverlay");
     public static ReflectorMethod ForgeEventFactory_renderFireOverlay = new ReflectorMethod(ForgeEventFactory, "renderFireOverlay");
     public static ReflectorMethod ForgeEventFactory_renderWaterOverlay = new ReflectorMethod(ForgeEventFactory, "renderWaterOverlay");
+	public static ReflectorMethod ForgeEventFactory_onPlaySoundAtEntity = new ReflectorMethod(ForgeEventFactory, "onPlaySoundAtEntity");
+	public static ReflectorMethod ForgeEventFactory_onClientChat = new ReflectorMethod(ForgeEventFactory, "onClientChat");
+	public static ReflectorMethod ForgeEventFactory_onClientSendMessage = new ReflectorMethod(ForgeEventFactory, "onClientSendMessage");
+	public static ReflectorMethod ForgeEventFactory_getMobGriefingEvent = new ReflectorMethod(ForgeEventFactory, "getMobGriefingEvent", new Class[] {World.class, Entity.class});
+	public static ReflectorMethod ForgeEventFactory_onPlayerClone = new ReflectorMethod(ForgeEventFactory, "onPlayerClone");
+	public static ReflectorMethod ForgeEventFactory_onPlayerDestroyItem = new ReflectorMethod(ForgeEventFactory, "onPlayerDestroyItem", new Class[] {EntityPlayer.class, ItemStack.class, EnumHand.class});
+
     public static ReflectorClass ForgeHooks = new ReflectorClass("net.minecraftforge.common.ForgeHooks");
     public static ReflectorMethod ForgeHooks_onLivingAttack = new ReflectorMethod(ForgeHooks, "onLivingAttack");
     public static ReflectorMethod ForgeHooks_onLivingDeath = new ReflectorMethod(ForgeHooks, "onLivingDeath");
@@ -226,8 +261,41 @@
     public static ReflectorMethod ForgeHooks_onLivingFall = new ReflectorMethod(ForgeHooks, "onLivingFall");
     public static ReflectorMethod ForgeHooks_onLivingHurt = new ReflectorMethod(ForgeHooks, "onLivingHurt");
     public static ReflectorMethod ForgeHooks_onLivingJump = new ReflectorMethod(ForgeHooks, "onLivingJump");
+	public static ReflectorMethod ForgeHooks_onThrowableImpact = new ReflectorMethod(ForgeHooks, "onThrowableImpact");
     public static ReflectorMethod ForgeHooks_onLivingSetAttackTarget = new ReflectorMethod(ForgeHooks, "onLivingSetAttackTarget");
     public static ReflectorMethod ForgeHooks_onLivingUpdate = new ReflectorMethod(ForgeHooks, "onLivingUpdate");
+	public static ReflectorMethod ForgeHooks_onServerChatEvent = new ReflectorMethod(ForgeHooks, "onServerChatEvent");
+	public static ReflectorMethod ForgeHooks_newChatWithLinks = new ReflectorMethod(ForgeHooks, "newChatWithLinks", new Class[]{String.class});
+	public static ReflectorMethod ForgeHooks_onInteractEntityAt = new ReflectorMethod(ForgeHooks, "onInteractEntityAt", new Class[]{EntityPlayer.class, Entity.class, RayTraceResult.class, EnumHand.class});
+	//public static ReflectorMethod ForgeHooks_onInteractEntityAtAction = new ReflectorMethod(ForgeHooks, "onInteractEntityAtAction", new Class[]{EntityPlayer.class, Entity.class, Vec3d.class, EnumHand.class});
+	public static ReflectorMethod ForgeHooks_onTravelToDimension = new ReflectorMethod(ForgeHooks, "onTravelToDimension");
+	public static ReflectorMethod ForgeHooks_onEmptyLeftClick = new ReflectorMethod(ForgeHooks, "onEmptyLeftClick", new Class[]{EntityPlayer.class});
+	public static ReflectorMethod ForgeHooks_onEmptyClick = new ReflectorMethod(ForgeHooks, "onEmptyClick");
+	public static ReflectorMethod ForgeHooks_onPickBlock = new ReflectorMethod(ForgeHooks, "onPickBlock");
+	public static ReflectorMethod ForgeHooks_onLeftClickBlock = new ReflectorMethod(ForgeHooks, "onLeftClickBlock", new Class[]{EntityPlayer.class, BlockPos.class, EnumFacing.class, Vec3d.class});
+	public static ReflectorMethod ForgeHooks_onRightClickBlock = new ReflectorMethod(ForgeHooks, "onRightClickBlock", new Class[]{EntityPlayer.class, EnumHand.class, BlockPos.class, EnumFacing.class, Vec3d.class});
+	public static ReflectorMethod ForgeHooks_onItemRightClick= new ReflectorMethod(ForgeHooks, "onItemRightClick", new Class[]{EntityPlayer.class, EnumHand.class});
+
+	public static ReflectorMethod ForgeHooks_rayTraceEyeHitVec = new ReflectorMethod(ForgeHooks, "rayTraceEyeHitVec");
+
+	public static ReflectorClass PlayerInteractionManager = new ReflectorClass(net.minecraft.server.management.PlayerInteractionManager.class);
+	public static ReflectorMethod PlayerInteractionManager_getBlockReachDistance = new ReflectorMethod(PlayerInteractionManager, "getBlockReachDistance");
+	
+	public static ReflectorClass PlayerInteractEvent= new ReflectorClass("net.minecraftforge.event.entity.player.PlayerInteractEvent");
+    public static ReflectorMethod PlayerInteractEvent_getCancellationResult = new ReflectorMethod(PlayerInteractEvent, "getCancellationResult");
+
+	public static ReflectorClass PlayerInteractEvent_LeftClickBlock = new ReflectorClass("net.minecraftforge.event.entity.player.PlayerInteractEvent$LeftClickBlock");
+	public static ReflectorMethod PlayerInteractEvent_LeftClickBlock_getUseItem = new ReflectorMethod(PlayerInteractEvent_LeftClickBlock, "getUseItem");
+	public static ReflectorMethod PlayerInteractEvent_LeftClickBlock_getUseBlock = new ReflectorMethod(PlayerInteractEvent_LeftClickBlock, "getUseBlock");
+
+	public static ReflectorClass PlayerInteractEvent_RightClickBlock = new ReflectorClass("net.minecraftforge.event.entity.player.PlayerInteractEvent$RightClickBlock");
+	public static ReflectorMethod PlayerInteractEvent_RightClickBlock_getUseItem = new ReflectorMethod(PlayerInteractEvent_RightClickBlock, "getUseItem");
+	public static ReflectorMethod PlayerInteractEvent_RightClickBlock_getUseBlock = new ReflectorMethod(PlayerInteractEvent_RightClickBlock, "getUseBlock");
+
+	public static ReflectorClass ForgeParticleManager = new ReflectorClass(ParticleManager.class);
+	public static ReflectorMethod ForgeParticleManager_addBlockHitEffects = new ReflectorMethod(ForgeParticleManager, "addBlockHitEffects");
+
+
     public static ReflectorClass ForgeHooksClient = new ReflectorClass("net.minecraftforge.client.ForgeHooksClient");
     public static ReflectorMethod ForgeHooksClient_applyTransform_M4 = new ReflectorMethod(ForgeHooksClient, "applyTransform", new Class[] {Matrix4f.class, Optional.class});
     public static ReflectorMethod ForgeHooksClient_applyTransform_MR = new ReflectorMethod(ForgeHooksClient, "applyTransform", new Class[] {ModelRotation.class, Optional.class});
@@ -241,6 +309,17 @@
     public static ReflectorMethod ForgeHooksClient_getFogDensity = new ReflectorMethod(ForgeHooksClient, "getFogDensity");
     public static ReflectorMethod ForgeHooksClient_getFOVModifier = new ReflectorMethod(ForgeHooksClient, "getFOVModifier");
     public static ReflectorMethod ForgeHooksClient_getMatrix = new ReflectorMethod(ForgeHooksClient, "getMatrix", new Class[] {ModelRotation.class});
+	public static ReflectorMethod ForgeHooksClient_postMouseEvent = new ReflectorMethod(ForgeHooksClient, "postMouseEvent");
+	public static ReflectorMethod ForgeHooksClient_shouldCauseBlockBreakReset = new ReflectorMethod(ForgeHooksClient, "shouldCauseBlockBreakReset");
+	public static ReflectorMethod ForgeHooksClient_onInputUpdate = new ReflectorMethod(ForgeHooksClient, "onInputUpdate");
+
+	public static ReflectorClass FMLStartupQuery = new ReflectorClass("net.minecraftforge.fml.common.StartupQuery");
+	public static ReflectorMethod FMLStartupQuery_check = new ReflectorMethod(FMLStartupQuery, "check");
+	public static ReflectorClass ForgeSession = new ReflectorClass(Session.class);
+	public static ReflectorMethod ForgeSession_hasCachedProperties = new ReflectorMethod(ForgeSession, "hasCachedProperties");
+	public static ReflectorMethod ForgeSession_setProperties= new ReflectorMethod(ForgeSession, "setProperties");
+	public static ReflectorClass ForgeWorldEvent_Unload = new ReflectorClass("net.minecraftforge.event.world.WorldEvent$Unload");
+	public static ReflectorConstructor ForgeWorldEvent_Unload_Constructor = new ReflectorConstructor(ForgeWorldEvent_Unload, new Class[]{World.class});
     public static ReflectorMethod ForgeHooksClient_getOffsetFOV = new ReflectorMethod(ForgeHooksClient, "getOffsetFOV");
     public static ReflectorMethod ForgeHooksClient_loadEntityShader = new ReflectorMethod(ForgeHooksClient, "loadEntityShader");
     public static ReflectorMethod ForgeHooksClient_onDrawBlockHighlight = new ReflectorMethod(ForgeHooksClient, "onDrawBlockHighlight");
@@ -258,6 +337,7 @@
     public static ReflectorMethod ForgeHooksClient_setRenderPass = new ReflectorMethod(ForgeHooksClient, "setRenderPass");
     public static ReflectorMethod ForgeHooksClient_shouldCauseReequipAnimation = new ReflectorMethod(ForgeHooksClient, "shouldCauseReequipAnimation");
     public static ReflectorMethod ForgeHooksClient_transform = new ReflectorMethod(ForgeHooksClient, "transform");
+    
     public static ReflectorClass ForgeItem = new ReflectorClass(Item.class);
     public static ReflectorField ForgeItem_delegate = new ReflectorField(ForgeItem, "delegate");
     public static ReflectorMethod ForgeItem_getDurabilityForDisplay = new ReflectorMethod(ForgeItem, "getDurabilityForDisplay");
@@ -268,12 +348,24 @@
     public static ReflectorMethod ForgeItem_onEntitySwing = new ReflectorMethod(ForgeItem, "onEntitySwing");
     public static ReflectorMethod ForgeItem_shouldCauseReequipAnimation = new ReflectorMethod(ForgeItem, "shouldCauseReequipAnimation");
     public static ReflectorMethod ForgeItem_showDurabilityBar = new ReflectorMethod(ForgeItem, "showDurabilityBar");
+    public static ReflectorMethod ForgeItem_getFontRenderer = new ReflectorMethod(ForgeItem, "getFontRenderer");
+    public static ReflectorMethod ForgeItem_onBlockBreakStart = new ReflectorMethod(ForgeItem, "onBlockStartBreak", new Class[] {ItemStack.class, BlockPos.class, EntityPlayer.class});
+    public static ReflectorMethod ForgeItem_canDestroyBlockInCreative = new ReflectorMethod(ForgeItem, "canDestroyBlockInCreative", new Class[] {World.class, BlockPos.class, ItemStack.class, EntityPlayer.class});
+   
+    public static ReflectorClass ForgeItemStack = new ReflectorClass(ItemStack.class);
+    public static ReflectorMethod ForgeItemStack_onItemUseFirst = new ReflectorMethod(ForgeItemStack, "onItemUseFirst");
+    public static ReflectorMethod ForgeItemStack_doesSneakBypassUse = new ReflectorMethod(ForgeItemStack, "doesSneakBypassUse");
+
     public static ReflectorClass ForgeItemArmor = new ReflectorClass(ItemArmor.class);
     public static ReflectorMethod ForgeItemArmor_hasOverlay = new ReflectorMethod(ForgeItemArmor, "hasOverlay");
     public static ReflectorClass ForgeKeyBinding = new ReflectorClass(KeyBinding.class);
     public static ReflectorMethod ForgeKeyBinding_setKeyConflictContext = new ReflectorMethod(ForgeKeyBinding, "setKeyConflictContext");
     public static ReflectorMethod ForgeKeyBinding_setKeyModifierAndCode = new ReflectorMethod(ForgeKeyBinding, "setKeyModifierAndCode");
     public static ReflectorMethod ForgeKeyBinding_getKeyModifier = new ReflectorMethod(ForgeKeyBinding, "getKeyModifier");
+	public static ReflectorMethod ForgeKeyBinding_isActiveAndMatches = new ReflectorMethod(ForgeKeyBinding, "isActiveAndMatches");
+	public static ReflectorMethod ForgeKeyBinding_getDisplayName= new ReflectorMethod(ForgeKeyBinding, "getDisplayName");
+	
+
     public static ReflectorClass ForgeModContainer = new ReflectorClass("net.minecraftforge.common.ForgeModContainer");
     public static ReflectorField ForgeModContainer_forgeLightPipelineEnabled = new ReflectorField(ForgeModContainer, "forgeLightPipelineEnabled");
     public static ReflectorField ForgeModContainer_allowEmissiveItems = new ReflectorField(ForgeModContainer, "allowEmissiveItems");
@@ -289,6 +381,9 @@
     public static ReflectorMethod ForgeTileEntity_getRenderBoundingBox = new ReflectorMethod(ForgeTileEntity, "getRenderBoundingBox");
     public static ReflectorMethod ForgeTileEntity_hasFastRenderer = new ReflectorMethod(ForgeTileEntity, "hasFastRenderer");
     public static ReflectorMethod ForgeTileEntity_shouldRenderInPass = new ReflectorMethod(ForgeTileEntity, "shouldRenderInPass");
+	public static ReflectorMethod ForgeTileEntity_handleUpdateTag = new ReflectorMethod(ForgeTileEntity, "handleUpdateTag");
+	public static ReflectorMethod ForgeTileEntity_onDataPacket = new ReflectorMethod(ForgeTileEntity, "onDataPacket");
+
     public static ReflectorClass ForgeVertexFormatElementEnumUseage = new ReflectorClass(VertexFormatElement.EnumUsage.class);
     public static ReflectorMethod ForgeVertexFormatElementEnumUseage_preDraw = new ReflectorMethod(ForgeVertexFormatElementEnumUseage, "preDraw");
     public static ReflectorMethod ForgeVertexFormatElementEnumUseage_postDraw = new ReflectorMethod(ForgeVertexFormatElementEnumUseage, "postDraw");
@@ -504,6 +599,146 @@
     public static ReflectorField TileEntitySkullRenderer_dragonHead = new ReflectorField(TileEntitySkullRenderer, ModelDragonHead.class, 0);
     public static ReflectorField TileEntitySkullRenderer_skeletonHead = new ReflectorField(TileEntitySkullRenderer, ModelSkeletonHead.class, 0);
     public static ReflectorField TileEntitySkullRenderer_humanoidHead = new ReflectorField(TileEntitySkullRenderer, ModelSkeletonHead.class, 1);
+	public static ReflectorClass EnderTeleportEvent = new ReflectorClass("net.minecraftforge.event.entity.living.EnderTeleportEvent");
+	public static ReflectorConstructor EnderTeleportEvent_Constuctor = new ReflectorConstructor(EnderTeleportEvent, new Class[] {EntityLivingBase.class, Double.TYPE, Double.TYPE, Double.TYPE, Float.TYPE});
+	public static ReflectorMethod EnderTeleportEvent_getTargetX = new ReflectorMethod(EnderTeleportEvent, "getTargetX");
+	public static ReflectorMethod EnderTeleportEvent_getTargetY = new ReflectorMethod(EnderTeleportEvent, "getTargetY");
+	public static ReflectorMethod EnderTeleportEvent_getTargetZ = new ReflectorMethod(EnderTeleportEvent, "getTargetZ");
+	public static ReflectorField ForgeModContainer_alwaysSetupTerrainOffThread = new ReflectorField(ForgeModContainer, "alwaysSetupTerrainOffThread");
+	public static ReflectorClass GameRegistry = new ReflectorClass("net.minecraftforge.fml.common.registry.GameRegistry");
+	public static ReflectorMethod GameRegistry_addShapedRecipe= new ReflectorMethod(GameRegistry, "addShapedRecipe", new Class[] {ResourceLocation.class, ResourceLocation.class, ItemStack.class, Object[].class});
+
+	public static ReflectorMethod ForgeWorldProvider_getRandomizedSpawnPoint = new ReflectorMethod(ForgeWorldProvider, "getRandomizedSpawnPoint");
+
+	public static ReflectorClass GuiUtils = new ReflectorClass("net.minecraftforge.fml.client.config.GuiUtils");
+	public static ReflectorMethod GuiUtils_preItemToolTip = new ReflectorMethod(GuiUtils, "preItemToolTip");
+	public static ReflectorMethod GuiUtils_postItemToolTip = new ReflectorMethod(GuiUtils, "postItemToolTip");
+	public static ReflectorMethod GuiUtils_drawHoveringText = new ReflectorMethod(GuiUtils, "drawHoveringText", new Class[]{List.class, Integer.TYPE, Integer.TYPE, Integer.TYPE, Integer.TYPE, Integer.TYPE, FontRenderer.class});
+
+	public static ReflectorClass ClientCommandHandler = new ReflectorClass("net.minecraftforge.client.ClientCommandHandler");
+	public static ReflectorField ClientCommandHandler_instance = new ReflectorField(ClientCommandHandler, "instance");
+
+	//public static ReflectorClass AchievementPage = new ReflectorClass("net.minecraftforge.common.AchievementPage");
+	//public static ReflectorMethod AchievementPage_isAchievementInPages = new ReflectorMethod(AchievementPage, "isAchievementInPages");
+	//public static ReflectorMethod AchievementPage_getTitle = new ReflectorMethod(AchievementPage, "getTitle");
+	//public static ReflectorMethod AchievementPage_getAchievementPages = new ReflectorMethod(AchievementPage, "getAchievementPages");
+	//public static ReflectorMethod AchievementPage_getAchievementPage = new ReflectorMethod(AchievementPage, "getAchievementPage", new Class[]{Integer.TYPE});
+	//public static ReflectorMethod AchievementPage_getAchievements = new ReflectorMethod(AchievementPage, "getAchievements");
+
+ 	public static ReflectorClass GuiScreenEvent = new ReflectorClass("net.minecraftforge.client.event.GuiScreenEvent");
+ 	public static ReflectorClass GuiScreenEvent_ActionPerformedEvent = new ReflectorClass("net.minecraftforge.client.event.GuiScreenEvent$ActionPerformedEvent");
+ 	public static ReflectorMethod GuiScreenEvent_ActionPerformedEvent_getButton = new ReflectorMethod(GuiScreenEvent_ActionPerformedEvent, "getButton");
+ 	public static ReflectorClass GuiScreenEvent_ActionPerformedEvent_Pre = new ReflectorClass("net.minecraftforge.client.event.GuiScreenEvent$ActionPerformedEvent$Pre");
+ 	public static ReflectorConstructor GuiScreenEvent_ActionPerformedEvent_Pre_Constructor = new ReflectorConstructor(GuiScreenEvent_ActionPerformedEvent_Pre, new Class[] {GuiScreen.class, GuiButton.class, List.class});
+ 	public static ReflectorClass GuiScreenEvent_ActionPerformedEvent_Post = new ReflectorClass("net.minecraftforge.client.event.GuiScreenEvent$ActionPerformedEvent$Post");
+ 	public static ReflectorConstructor GuiScreenEvent_ActionPerformedEvent_Post_Constructor = new ReflectorConstructor(GuiScreenEvent_ActionPerformedEvent_Post, new Class[] {GuiScreen.class, GuiButton.class, List.class});
+ 	public static ReflectorClass GuiScreenEvent_InitGuiEvent_Pre = new ReflectorClass("net.minecraftforge.client.event.GuiScreenEvent$InitGuiEvent$Pre");
+ 	public static ReflectorConstructor GuiScreenEvent_InitGuiEvent_Pre_Constructor = new ReflectorConstructor(GuiScreenEvent_InitGuiEvent_Pre, new Class[] {GuiScreen.class, List.class});
+ 	public static ReflectorClass GuiScreenEvent_InitGuiEvent_Post = new ReflectorClass("net.minecraftforge.client.event.GuiScreenEvent$InitGuiEvent$Post");
+ 	public static ReflectorConstructor GuiScreenEvent_InitGuiEvent_Post_Constructor = new ReflectorConstructor(GuiScreenEvent_InitGuiEvent_Post, new Class[] {GuiScreen.class, List.class});
+ 	public static ReflectorClass GuiScreenEvent_MouseInputEvent_Pre = new ReflectorClass("net.minecraftforge.client.event.GuiScreenEvent$MouseInputEvent$Pre");
+ 	public static ReflectorConstructor GuiScreenEvent_MouseInputEvent_Pre_Constructor = new ReflectorConstructor(GuiScreenEvent_MouseInputEvent_Pre, new Class[] {GuiScreen.class});
+ 	public static ReflectorClass GuiScreenEvent_MouseInputEvent_Post = new ReflectorClass("net.minecraftforge.client.event.GuiScreenEvent$MouseInputEvent$Post");
+ 	public static ReflectorConstructor GuiScreenEvent_MouseInputEvent_Post_Constructor = new ReflectorConstructor(GuiScreenEvent_MouseInputEvent_Post, new Class[] {GuiScreen.class});
+ 	public static ReflectorClass GuiScreenEvent_KeyboardInputEvent_Pre = new ReflectorClass("net.minecraftforge.client.event.GuiScreenEvent$KeyboardInputEvent$Pre");
+ 	public static ReflectorConstructor GuiScreenEvent_KeyboardInputEvent_Pre_Constructor = new ReflectorConstructor(GuiScreenEvent_KeyboardInputEvent_Pre, new Class[] {GuiScreen.class});
+ 	public static ReflectorClass GuiScreenEvent_KeyboardInputEvent_Post = new ReflectorClass("net.minecraftforge.client.event.GuiScreenEvent$KeyboardInputEvent$Post");
+ 	public static ReflectorConstructor GuiScreenEvent_KeyboardInputEvent_Post_Constructor = new ReflectorConstructor(GuiScreenEvent_KeyboardInputEvent_Post, new Class[] {GuiScreen.class});
+ 	public static ReflectorClass GuiScreenEvent_BackgroundDrawnEvent = new ReflectorClass("net.minecraftforge.client.event.GuiScreenEvent$BackgroundDrawnEvent");
+ 	public static ReflectorConstructor GuiScreenEvent_BackgroundDrawnEvent_Constructor = new ReflectorConstructor(GuiScreenEvent_BackgroundDrawnEvent, new Class[] {GuiScreen.class});
+ 
+ 	public static ReflectorClass RenderPlayerEvent_Pre = new ReflectorClass("net.minecraftforge.client.event.RenderPlayerEvent$Pre");
+ 	public static ReflectorConstructor RenderPlayerEvent_Pre_Constructor = new ReflectorConstructor(RenderPlayerEvent_Pre, new Class[] {EntityPlayer.class, RenderPlayer.class, Float.TYPE, Double.TYPE, Double.TYPE, Double.TYPE});
+ 	public static ReflectorClass RenderPlayerEvent_Post = new ReflectorClass("net.minecraftforge.client.event.RenderPlayerEvent$Post");
+ 	public static ReflectorConstructor RenderPlayerEvent_Post_Constructor = new ReflectorConstructor(RenderPlayerEvent_Post, new Class[] {EntityPlayer.class, RenderPlayer.class, Float.TYPE, Double.TYPE, Double.TYPE, Double.TYPE});
+ 
+ 	public static ReflectorClass NetworkDispatcher = new ReflectorClass("net.minecraftforge.fml.common.network.handshake.NetworkDispatcher");
+ 	public static ReflectorMethod NetworkDispatcher_get = new ReflectorMethod(NetworkDispatcher, "get");
+ 	public static ReflectorMethod NetworkDispatcher_getOverrideDimension = new ReflectorMethod(NetworkDispatcher, "getOverrideDimension");
+ 
+ 
+ 	public static ReflectorClass PlaySoundAtEntityEvent = new ReflectorClass("net.minecraftforge.event.entity.PlaySoundAtEntityEvent");
+ 	public static ReflectorMethod PlaySoundAtEntityEvent_getSound = new ReflectorMethod(PlaySoundAtEntityEvent, "getSound");
+ 	public static ReflectorMethod PlaySoundAtEntityEvent_getVolume = new ReflectorMethod(PlaySoundAtEntityEvent, "getVolume");
+ 	public static ReflectorMethod PlaySoundAtEntityEvent_getPitch = new ReflectorMethod(PlaySoundAtEntityEvent, "getPitch");
+ 	public static ReflectorMethod PlaySoundAtEntityEvent_getCategory= new ReflectorMethod(PlaySoundAtEntityEvent, "getCategory");
+ 
+ 
+ 	public static ReflectorClass PlayerDropsEvent = new ReflectorClass("net.minecraftforge.event.entity.player.PlayerDropsEvent");
+ 	public static ReflectorConstructor PlayerDropsEvent_Constructor = new ReflectorConstructor(PlayerDropsEvent, new Class[] {EntityPlayer.class, DamageSource.class, List.class, Boolean.TYPE});
+ 	public static ReflectorClass PlayerContainerEventOpen = new ReflectorClass("net.minecraftforge.event.entity.player.PlayerContainerEvent$Open");
+ 	public static ReflectorConstructor PlayerContainerEventOpen_Constructor = new ReflectorConstructor(PlayerContainerEventOpen, new Class[] {EntityPlayer.class, Container.class});
+ 	public static ReflectorClass PlayerContainerEventClose = new ReflectorClass("net.minecraftforge.event.entity.player.PlayerContainerEvent$Close");
+ 	public static ReflectorConstructor PlayerContainerEventClose_Constructor = new ReflectorConstructor(PlayerContainerEventClose, new Class[] {EntityPlayer.class, Container.class});
+ 	//public static ReflectorClass AchievementEvent = new ReflectorClass("net.minecraftforge.event.entity.player.AchievementEvent");
+ 
+ 	public static ReflectorClass SplashProgress = new ReflectorClass("net.minecraftforge.fml.client.SplashProgress");
+ 	public static ReflectorMethod SplashProgress_drawVanillaScreen = new ReflectorMethod(SplashProgress, "drawVanillaScreen");
+ 	public static ReflectorMethod SplashProgress_clearVanillaResources = new ReflectorMethod(SplashProgress, "clearVanillaResources");
+ 	public static ReflectorMethod SplashProgress_getMaxTextureSize = new ReflectorMethod(SplashProgress, "getMaxTextureSize");
+ 	public static ReflectorMethod SplashProgress_pause= new ReflectorMethod(SplashProgress, "pause");
+ 	public static ReflectorMethod SplashProgress_resume= new ReflectorMethod(SplashProgress, "resume");
+ 	 
+ 	 
+ 	public static ReflectorClass FMLCommonProgressManager = new ReflectorClass("net.minecraftforge.fml.common.ProgressManager");
+ 	public static ReflectorMethod FMLCommonProgressManager_push = new ReflectorMethod(FMLCommonProgressManager, "push", new Class[] {String.class, Integer.TYPE, Boolean.TYPE});
+ 	public static ReflectorMethod FMLCommonProgressManager_pop = new ReflectorMethod(FMLCommonProgressManager, "pop");
+ 	public static ReflectorClass FMLCommonProgressManager_ProgressBar = new ReflectorClass("net.minecraftforge.fml.common.ProgressManager$ProgressBar");
+ 	public static ReflectorMethod FMLCommonProgressManager_ProgressBar_step = new ReflectorMethod(FMLCommonProgressManager_ProgressBar, "step", new Class[] {String.class});
+ 	public static ReflectorClass ForgeGuiIngame = new ReflectorClass("net.minecraftforge.client.GuiIngameForge");
+ 	public static ReflectorConstructor ForgeGuiIngame_Constructor = new ReflectorConstructor(ForgeGuiIngame, new Class[]{Minecraft.class});
+ 	public static ReflectorField ForgeGuiIngame_renderCrosshairs = new ReflectorField(ForgeGuiIngame, "renderCrosshairs");
+ 	public static ReflectorField ForgeGuiIngame_renderHelmet = new ReflectorField(ForgeGuiIngame, "renderHelmet");
+ 	 
+ 	public static ReflectorClass ForgeTextureAtlasSprite = new ReflectorClass(TextureAtlasSprite.class);
+ 	 
+ 	public static ReflectorClass GameData = new ReflectorClass("net.minecraftforge.registries.GameData");
+	public static ReflectorMethod GameData_vanillaSnapshot = new ReflectorMethod(GameData, "vanillaSnapshot");
+
+	public static ReflectorClass DispenseFluidContainer = new ReflectorClass("net.minecraftforge.fluids.DispenseFluidContainer");
+	public static ReflectorMethod DispenseFluidContainer_getInstance = new ReflectorMethod(DispenseFluidContainer, "getInstance");
+
+	public static ReflectorMethod FMLClientHandler_beginMinecraftLoading = new ReflectorMethod(FMLClientHandler, "beginMinecraftLoading"); //
+	public static ReflectorMethod FMLClientHandler_finishMinecraftLoading = new ReflectorMethod(FMLClientHandler, "finishMinecraftLoading");
+	public static ReflectorMethod FMLClientHandler_connectToServerAtStartup = new ReflectorMethod(FMLClientHandler, "connectToServerAtStartup");
+	public static ReflectorMethod FMLClientHandler_onInitializationComplete = new ReflectorMethod(FMLClientHandler, "onInitializationComplete");
+	public static ReflectorMethod FMLClientHandler_startIntegratedServer = new ReflectorMethod(FMLClientHandler, "startIntegratedServer");
+	public static ReflectorMethod FMLClientHandler_handleClientWorldClosing = new ReflectorMethod(FMLClientHandler, "handleClientWorldClosing");
+	public static ReflectorMethod FMLClientHandler_showInGameModOptions = new ReflectorMethod(FMLClientHandler, "showInGameModOptions");
+	public static ReflectorMethod FMLCommonHandler_handleExit = new ReflectorMethod(FMLCommonHandler, "handleExit");
+	public static ReflectorMethod FMLCommonHandler_onRenderTickStart = new ReflectorMethod(FMLCommonHandler, "onRenderTickStart");
+	public static ReflectorMethod FMLCommonHandler_onRenderTickEnd = new ReflectorMethod(FMLCommonHandler, "onRenderTickEnd");
+	public static ReflectorMethod FMLCommonHandler_onPreClientTick = new ReflectorMethod(FMLCommonHandler, "onPreClientTick");
+	public static ReflectorMethod FMLCommonHandler_onPostClientTick = new ReflectorMethod(FMLCommonHandler, "onPostClientTick");
+	public static ReflectorMethod FMLCommonHandler_fireMouseInput = new ReflectorMethod(FMLCommonHandler, "fireMouseInput");
+	public static ReflectorMethod FMLCommonHandler_fireKeyInput = new ReflectorMethod(FMLCommonHandler, "fireKeyInput");
+	public static ReflectorMethod FMLCommonHandler_onPlayerPreTick = new ReflectorMethod(FMLCommonHandler, "onPlayerPreTick");
+	public static ReflectorMethod FMLCommonHandler_onPlayerPostTick = new ReflectorMethod(FMLCommonHandler, "onPlayerPostTick");
+	public static ReflectorMethod FMLCommonHandler_getModName = new ReflectorMethod(FMLCommonHandler, "getModName");
+
+	public static ReflectorClass ForgeInitGuiEvent_Pre = new ReflectorClass("net.minecraftforge.client.event.GuiScreenEvent$InitGuiEvent$Pre");
+	public static ReflectorConstructor ForgeInitGuiEvent_Pre_Constructor = new ReflectorConstructor(ForgeInitGuiEvent_Pre, new Class[] {GuiScreen.class, List.class});
+	public static ReflectorClass ForgeInitGuiEvent_Post = new ReflectorClass("net.minecraftforge.client.event.GuiScreenEvent$InitGuiEvent$Post");
+	public static ReflectorConstructor ForgeInitGuiEvent_Post_Constructor = new ReflectorConstructor(ForgeInitGuiEvent_Post, new Class[] {GuiScreen.class, List.class});
+	public static ReflectorClass ForgeGuiOpenEvent = new ReflectorClass("net.minecraftforge.client.event.GuiOpenEvent");
+	public static ReflectorConstructor ForgeGuiOpenEvent_Constructor = new ReflectorConstructor(ForgeGuiOpenEvent, new Class[] {GuiScreen.class});
+	public static ReflectorField ForgeGuiOpenEvent_gui = new ReflectorField(ForgeGuiOpenEvent, "gui");
+
+	public static ReflectorClass ForgePlayerSPPushOutOfBlocksEvent = new ReflectorClass("net.minecraftforge.client.event.PlayerSPPushOutOfBlocksEvent");
+	public static ReflectorConstructor ForgePlayerSPPushOutOfBlocksEvent_Constructor = new ReflectorConstructor(ForgePlayerSPPushOutOfBlocksEvent, new Class[] {EntityPlayer.class, AxisAlignedBB.class});
+	public static ReflectorMethod ForgePlayerSPPushOutOfBlocksEvent_getEntityBoundingBox = new ReflectorMethod(ForgePlayerSPPushOutOfBlocksEvent, "getEntityBoundingBox");
+
+	// VanillaFix support
+	public static ReflectorClass VFTemporaryStorage = new ReflectorClass("org.dimdev.vanillafix.textures.TemporaryStorage");
+	public static ReflectorField VFTemporaryStorage_texturesUsed = new ReflectorField(VFTemporaryStorage, "texturesUsed");
+	public static ReflectorMethod VFTextureAtlasSprite_markNeedsAnimationUpdate = new ReflectorMethod(ForgeTextureAtlasSprite, "markNeedsAnimationUpdate");
+	public static ReflectorMethod VFTextureAtlasSprite_needsAnimationUpdate = new ReflectorMethod(ForgeTextureAtlasSprite, "needsAnimationUpdate");
+	// End VanillaFix support
+
+	public static boolean forgeExists()
+	{
+		return EventBus.exists();
+	}
 
     public static void callVoid(ReflectorMethod refMethod, Object... params)
     {
