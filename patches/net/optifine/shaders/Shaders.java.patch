--- a/net/optifine/shaders/Shaders.java
+++ b/net/optifine/shaders/Shaders.java
@@ -118,6 +118,8 @@
 import org.lwjgl.util.glu.GLU;
 import org.lwjgl.util.vector.Vector4f;
 
+import org.vivecraft.render.RenderPass;
+
 public class Shaders
 {
     static Minecraft mc;
@@ -150,7 +152,9 @@
     public static boolean itemToRenderMainTranslucent = false;
     public static boolean itemToRenderOffTranslucent = false;
     static float[] sunPosition = new float[4];
+    static float[] sunPositionT = new float[4];
     static float[] moonPosition = new float[4];
+    static float[] moonPositionT = new float[4];
     static float[] shadowLightPosition = new float[4];
     static float[] upPosition = new float[4];
     static float[] shadowLightPositionVector = new float[4];
@@ -205,7 +209,7 @@
     public static boolean useMidTexCoordAttrib = false;
     public static boolean useTangentAttrib = false;
     public static boolean progUseEntityAttrib = false;
-    public static boolean progUseMidTexCoordAttrib = false;
+    public static boolean progUseMidTexAttrib = false;
     public static boolean progUseTangentAttrib = false;
     private static boolean progArbGeometryShader4 = false;
     private static int progMaxVerticesOut = 3;
@@ -335,7 +339,7 @@
     static int usedShadowDepthBuffers = 0;
     static int usedColorAttachs = 0;
     static int usedDrawBuffers = 0;
-    static int dfb = 0;
+    public static int dfb = 0;
     static int sfb = 0;
     private static int[] gbuffersFormat = new int[8];
     public static boolean[] gbuffersClear = new boolean[8];
@@ -501,10 +505,10 @@
     static final FloatBuffer tempMatrixDirectBuffer = nextFloatBuffer(16);
     static final FloatBuffer tempDirectFloatBuffer = nextFloatBuffer(16);
     static final IntBuffer dfbColorTextures = nextIntBuffer(16);
-    static final IntBuffer dfbDepthTextures = nextIntBuffer(3);
+    public static final IntBuffer dfbDepthTextures = nextIntBuffer(3);
     static final IntBuffer sfbColorTextures = nextIntBuffer(8);
     static final IntBuffer sfbDepthTextures = nextIntBuffer(2);
-    static final IntBuffer dfbDrawBuffers = nextIntBuffer(8);
+        static final IntBuffer dfbDrawBuffers = nextIntBuffer(8);
     static final IntBuffer sfbDrawBuffers = nextIntBuffer(8);
     static final IntBuffer drawBuffersNone = (IntBuffer)nextIntBuffer(8).limit(0);
     static final IntBuffer drawBuffersColorAtt0 = (IntBuffer)nextIntBuffer(8).put(36064).position(0).limit(1);
@@ -844,11 +848,11 @@
             flag2 = true;
         }
 
-        if (Config.isFastRender())
-        {
-            SMCLog.info("Shaders can not be loaded, Fast Render is enabled.");
-            flag2 = true;
-        }
+//        if (Config.isFastRender())
+//        {
+//            SMCLog.info("Shaders can not be loaded, Fast Render is enabled.");
+//            flag2 = true;
+//        }
 
         String s = shadersConfig.getProperty(EnumShaderOption.SHADER_PACK.getPropertyKey(), "(internal)");
 
@@ -876,6 +880,25 @@
         loadShaderPackResources();
         loadShaderPackDimensions();
         shaderPackOptions = loadShaderPackOptions();
+        
+        //Vivecraft clean shader options
+        for (ShaderOption sh : shaderPackOptions) {
+			System.out.println("Shader Option: " + sh.toString());
+			if (sh.getName().equalsIgnoreCase("motion_blur")) //seus
+				sh.setValue("false");
+			if (sh.getName().equalsIgnoreCase("motionblur")) //bsl
+				sh.setValue("false");
+			if (sh.getName().equalsIgnoreCase("dof")) //bsl
+				sh.setValue("false");
+			if (sh.getName().equalsIgnoreCase("dirtyLens")) //bsl
+				sh.setValue("false");
+			if (sh.getName().equalsIgnoreCase("lensflare")) //bsl
+				sh.setValue("false");
+			if (sh.getName().equalsIgnoreCase("IDLE_HANDS")) //qol
+				sh.setValue("false");
+		}
+        //
+        
         loadShaderPackProperties();
         boolean flag3 = shaderPackLoaded != flag;
         boolean flag4 = isOldLighting() != flag1;
@@ -2034,11 +2057,10 @@
         SMCLog.info(stringbuilder.toString());
     }
 
-    public static void startup(Minecraft mc)
+    public static void startup(Minecraft mcin)
     {
         checkShadersModInstalled();
-        mc = mc;
-        mc = Minecraft.getMinecraft();
+        mc = mcin;
         capabilities = GLContext.getCapabilities();
         glVersionString = GL11.glGetString(GL11.GL_VERSION);
         glVendorString = GL11.glGetString(GL11.GL_VENDOR);
@@ -2519,7 +2541,7 @@
         if (i != 0)
         {
             progUseEntityAttrib = false;
-            progUseMidTexCoordAttrib = false;
+            progUseMidTexAttrib = false;
             progUseTangentAttrib = false;
             int j = createVertShader(program, vShaderPath);
             int k = createGeomShader(program, gShaderPath);
@@ -2568,10 +2590,10 @@
                     checkGLError("mc_Entity");
                 }
 
-                if (progUseMidTexCoordAttrib)
+                if (progUseMidTexAttrib)
                 {
-                    ARBVertexShader.glBindAttribLocationARB(i, midTexCoordAttrib, "mc_midTexCoord");
-                    checkGLError("mc_midTexCoord");
+                    ARBVertexShader.glBindAttribLocationARB(i, midTexCoordAttrib, "mc_midTex");
+                    checkGLError("mc_midTex");
                 }
 
                 if (progUseTangentAttrib)
@@ -2687,7 +2709,7 @@
                                 else if (shaderline.isAttribute("mc_midTexCoord"))
                                 {
                                     useMidTexCoordAttrib = true;
-                                    progUseMidTexCoordAttrib = true;
+                                    progUseMidTexAttrib = true;
                                 }
                                 else if (shaderline.isAttribute("at_tangent"))
                                 {
@@ -3498,8 +3520,15 @@
                 setProgramUniform1f(uniform_viewHeight, (float)renderHeight);
                 setProgramUniform1f(uniform_near, 0.05F);
                 setProgramUniform1f(uniform_far, (float)(mc.gameSettings.renderDistanceChunks * 16));
-                setProgramUniform3f(uniform_sunPosition, sunPosition[0], sunPosition[1], sunPosition[2]);
-                setProgramUniform3f(uniform_moonPosition, moonPosition[0], moonPosition[1], moonPosition[2]);
+                
+                if(Minecraft.getMinecraft().currentPass == RenderPass.THIRD) {
+                    setProgramUniform3f(uniform_sunPosition, sunPositionT[0], sunPositionT[1], sunPositionT[2]);
+                    setProgramUniform3f(uniform_moonPosition, moonPositionT[0], moonPositionT[1], moonPositionT[2]);
+                }else {
+                    setProgramUniform3f(uniform_sunPosition, sunPosition[0], sunPosition[1], sunPosition[2]);
+                    setProgramUniform3f(uniform_moonPosition, moonPosition[0], moonPosition[1], moonPosition[2]);
+                }
+                
                 setProgramUniform3f(uniform_shadowLightPosition, shadowLightPosition[0], shadowLightPosition[1], shadowLightPosition[2]);
                 setProgramUniform3f(uniform_upPosition, upPosition[0], upPosition[1], upPosition[2]);
                 setProgramUniform3f(uniform_previousCameraPosition, (float)previousCameraPositionX, (float)previousCameraPositionY, (float)previousCameraPositionZ);
@@ -3865,11 +3894,12 @@
 
     private static void resize()
     {
-        renderDisplayWidth = mc.displayWidth;
-        renderDisplayHeight = mc.displayHeight;
-        renderWidth = Math.round((float)renderDisplayWidth * configRenderResMul);
-        renderHeight = Math.round((float)renderDisplayHeight * configRenderResMul);
-        setupFrameBuffer();
+        renderDisplayWidth = mc.stereoProvider.framebufferVrRender.framebufferWidth;
+        renderDisplayHeight = mc.stereoProvider.framebufferVrRender.framebufferHeight;
+        // VIVE: NO! Doing scaling here breaks everything! We have our own scaled rendering so this is unnecessary.
+        renderWidth = renderDisplayWidth; //Math.round((float)renderDisplayWidth * configRenderResMul);
+        renderHeight = renderDisplayHeight; //Math.round((float)renderDisplayHeight * configRenderResMul);
+        dfb = setupFrameBuffer(dfb, renderWidth, renderHeight);
     }
 
     private static void resizeShadow()
@@ -3877,24 +3907,24 @@
         needResizeShadow = false;
         shadowMapWidth = Math.round((float)spShadowMapWidth * configShadowResMul);
         shadowMapHeight = Math.round((float)spShadowMapHeight * configShadowResMul);
-        setupShadowFrameBuffer();
+        sfb = setupShadowFrameBuffer(sfb, shadowMapHeight, shadowMapWidth);
     }
 
-    private static void setupFrameBuffer()
+    private static int setupFrameBuffer(int id, int w, int h)
     {
-        if (dfb != 0)
+        if (id != 0)
         {
-            EXTFramebufferObject.glDeleteFramebuffersEXT(dfb);
+            EXTFramebufferObject.glDeleteFramebuffersEXT(id);
             GlStateManager.deleteTextures(dfbDepthTextures);
             GlStateManager.deleteTextures(dfbColorTextures);
         }
 
-        dfb = EXTFramebufferObject.glGenFramebuffersEXT();
+        id = EXTFramebufferObject.glGenFramebuffersEXT();
         GL11.glGenTextures((IntBuffer)dfbDepthTextures.clear().limit(usedDepthBuffers));
         GL11.glGenTextures((IntBuffer)dfbColorTextures.clear().limit(16));
         dfbDepthTextures.position(0);
         dfbColorTextures.position(0);
-        EXTFramebufferObject.glBindFramebufferEXT(36160, dfb);
+        EXTFramebufferObject.glBindFramebufferEXT(36160, id);
         GL20.glDrawBuffers(0);
         GL11.glReadBuffer(0);
 
@@ -3967,8 +3997,9 @@
         }
         else
         {
-            SMCLog.info("Framebuffer created.");
+        	SMCLog.info("Framebuffer created." + id + ": " + w + " " + h + " " + i1);
         }
+        return id;
     }
 
     private static int getPixelFormat(int internalFormat)
@@ -3990,19 +4021,19 @@
         }
     }
 
-    private static void setupShadowFrameBuffer()
+    private static int setupShadowFrameBuffer(int id, int w, int h)
     {
         if (usedShadowDepthBuffers != 0)
         {
-            if (sfb != 0)
+            if (id != 0)
             {
                 EXTFramebufferObject.glDeleteFramebuffersEXT(sfb);
                 GlStateManager.deleteTextures(sfbDepthTextures);
                 GlStateManager.deleteTextures(sfbColorTextures);
             }
 
-            sfb = EXTFramebufferObject.glGenFramebuffersEXT();
-            EXTFramebufferObject.glBindFramebufferEXT(36160, sfb);
+            id = EXTFramebufferObject.glGenFramebuffersEXT();
+            EXTFramebufferObject.glBindFramebufferEXT(36160, id);
             GL11.glDrawBuffer(0);
             GL11.glReadBuffer(0);
             GL11.glGenTextures((IntBuffer)sfbDepthTextures.clear().limit(usedShadowDepthBuffers));
@@ -4061,13 +4092,15 @@
                 SMCLog.info("Shadow framebuffer created.");
             }
         }
+        
+        return id;
     }
 
     public static void beginRender(Minecraft minecraft, float partialTicks, long finishTimeNano)
     {
         checkGLError("pre beginRender");
-        checkWorldChanged(mc.world);
         mc = minecraft;
+        checkWorldChanged(mc.world);
         mc.mcProfiler.startSection("init");
         entityRenderer = mc.entityRenderer;
 
@@ -4089,10 +4122,23 @@
             }
         }
 
-        if (mc.displayWidth != renderDisplayWidth || mc.displayHeight != renderDisplayHeight)
-        {
-            resize();
-        }
+        if(mc.reinitflag || (mc.stereoProvider.framebufferVrRender.framebufferWidth != renderDisplayWidth || mc.stereoProvider.framebufferVrRender.framebufferHeight != renderDisplayHeight)){
+        	resize();
+        	mc.reinitflag = false;
+        }
+        
+        //Vive use right sizes and buffers
+//        if(mc.currentPass == RenderPass.Center){
+//        	dfb = dfbU;
+//        	renderWidth = Math.round(mc.mirrorFBWidth * configRenderResMul);
+//        	renderHeight = Math.round(mc.mirrorFBHeight * configRenderResMul);
+//        }else{
+        //NOPE!
+//        	dfb = dfbR;
+//        	renderWidth = Math.round(mc.displayFBWidth * configRenderResMul);
+//        	renderHeight = Math.round(mc.displayFBHeight * configRenderResMul);
+//        }
+        
 
         if (needResizeShadow)
         {
@@ -4327,7 +4373,7 @@
     }
 
     public static void setViewport(int vx, int vy, int vw, int vh)
-    {
+    { //nice parameters u got there.....
         GlStateManager.colorMask(true, true, true, true);
 
         if (isShadowPass)
@@ -4379,7 +4425,7 @@
         {
             checkGLError("shadow clear pre");
             EXTFramebufferObject.glFramebufferTexture2DEXT(36160, 36096, 3553, sfbDepthTextures.get(0), 0);
-            GL11.glClearColor(1.0F, 1.0F, 1.0F, 1.0F);
+            GlStateManager.clearColor(1.0F, 1.0F, 1.0F, 1.0F);
             GL20.glDrawBuffers(ProgramShadow.getDrawBuffers());
             checkFramebufferStatus("shadow clear");
             GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
@@ -4620,23 +4666,34 @@
 
     public static void postCelestialRotate()
     {
-        FloatBuffer floatbuffer = tempMatrixDirectBuffer;
-        floatbuffer.clear();
-        GL11.glGetFloat(GL11.GL_MODELVIEW_MATRIX, floatbuffer);
-        floatbuffer.get(tempMat, 0, 16);
-        SMath.multiplyMat4xVec4(sunPosition, tempMat, sunPosModelView);
-        SMath.multiplyMat4xVec4(moonPosition, tempMat, moonPosModelView);
-        System.arraycopy(shadowAngle == sunAngle ? sunPosition : moonPosition, 0, shadowLightPosition, 0, 3);
-        setProgramUniform3f(uniform_sunPosition, sunPosition[0], sunPosition[1], sunPosition[2]);
-        setProgramUniform3f(uniform_moonPosition, moonPosition[0], moonPosition[1], moonPosition[2]);
-        setProgramUniform3f(uniform_shadowLightPosition, shadowLightPosition[0], shadowLightPosition[1], shadowLightPosition[2]);
+    	FloatBuffer floatbuffer = tempMatrixDirectBuffer;
+    	floatbuffer.clear();
+    	GL11.glGetFloat(GL11.GL_MODELVIEW_MATRIX, floatbuffer);
+    	floatbuffer.get(tempMat, 0, 16);
+    	
+    	if(Minecraft.getMinecraft().currentPass == RenderPass.THIRD) {
+    		SMath.multiplyMat4xVec4(sunPositionT, tempMat, sunPosModelView);
+    		SMath.multiplyMat4xVec4(moonPositionT, tempMat, moonPosModelView);
+        	System.arraycopy(shadowAngle == sunAngle ? sunPositionT : moonPosition, 0, shadowLightPosition, 0, 3);
+        	setProgramUniform3f(uniform_sunPosition, sunPositionT[0], sunPositionT[1], sunPositionT[2]);
+        	setProgramUniform3f(uniform_moonPosition, moonPositionT[0], moonPositionT[1], moonPositionT[2]);
+        	setProgramUniform3f(uniform_shadowLightPosition, shadowLightPosition[0], shadowLightPosition[1], shadowLightPosition[2]);
+    	}
+    	else {
+    		SMath.multiplyMat4xVec4(sunPosition, tempMat, sunPosModelView);
+    		SMath.multiplyMat4xVec4(moonPosition, tempMat, moonPosModelView);
+        	System.arraycopy(shadowAngle == sunAngle ? sunPosition : moonPosition, 0, shadowLightPosition, 0, 3);
+        	setProgramUniform3f(uniform_sunPosition, sunPosition[0], sunPosition[1], sunPosition[2]);
+        	setProgramUniform3f(uniform_moonPosition, moonPosition[0], moonPosition[1], moonPosition[2]);
+        	setProgramUniform3f(uniform_shadowLightPosition, shadowLightPosition[0], shadowLightPosition[1], shadowLightPosition[2]);
+    	}   		
+
+    	if (customUniforms != null)
+    	{
+    		customUniforms.update();
+    	}
 
-        if (customUniforms != null)
-        {
-            customUniforms.update();
-        }
-
-        checkGLError("postCelestialRotate");
+    	checkGLError("postCelestialRotate");
     }
 
     public static void setUpPosition()
@@ -4794,7 +4851,7 @@
             GL11.glPushMatrix();
             GL11.glLoadIdentity();
             GL11.glOrtho(0.0D, 1.0D, 0.0D, 1.0D, 0.0D, 1.0D);
-            GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+            GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
             GlStateManager.enableTexture2D();
             GlStateManager.disableAlpha();
             GlStateManager.disableBlend();
@@ -4951,7 +5008,7 @@
         isRenderingDfb = false;
         mc.getFramebuffer().bindFramebuffer(true);
         OpenGlHelper.glFramebufferTexture2D(OpenGlHelper.GL_FRAMEBUFFER, OpenGlHelper.GL_COLOR_ATTACHMENT0, 3553, mc.getFramebuffer().framebufferTexture, 0);
-        GL11.glViewport(0, 0, mc.displayWidth, mc.displayHeight);
+        //Nope. GL11.glViewport(0, 0, mc.displayWidth, mc.displayHeight);
 
         if (EntityRenderer.anaglyphEnable)
         {
@@ -4960,9 +5017,9 @@
         }
 
         GlStateManager.depthMask(true);
-        GL11.glClearColor(clearColorR, clearColorG, clearColorB, 1.0F);
+        GlStateManager.clearColor(clearColorR, clearColorG, clearColorB, 1.0F);
         GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
-        GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+        GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
         GlStateManager.enableTexture2D();
         GlStateManager.disableAlpha();
         GlStateManager.disableBlend();
@@ -5959,4 +6016,4 @@
         shaderPacksDir = new File(Minecraft.getMinecraft().mcDataDir, "shaderpacks");
         configFile = new File(Minecraft.getMinecraft().mcDataDir, "optionsshaders.txt");
     }
-}
+}
\ No newline at end of file
