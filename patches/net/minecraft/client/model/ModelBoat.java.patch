--- a/net/minecraft/client/model/ModelBoat.java
+++ b/net/minecraft/client/model/ModelBoat.java
@@ -1,114 +1,170 @@
 package net.minecraft.client.model;
 
+import org.vivecraft.gameplay.OpenVRPlayer;
+import org.vivecraft.provider.MCOpenVR;
+import org.vivecraft.render.PlayerModelController;
+import org.vivecraft.settings.VRSettings;
+import org.vivecraft.utils.Quaternion;
+import net.minecraft.client.Minecraft;
 import net.minecraft.client.renderer.GLAllocation;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.item.EntityBoat;
+import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.util.math.MathHelper;
+import net.minecraft.util.math.Vec3d;
+import org.vivecraft.utils.Vector3;
 
-public class ModelBoat extends ModelBase implements IMultipassModel
-{
-    public ModelRenderer[] boatSides = new ModelRenderer[5];
-    public ModelRenderer[] paddles = new ModelRenderer[2];
-
-    /**
-     * An invisible layer that is rendered to make it seem like there's no water in the boat.
-     *  
-     * @see https://redd.it/3qufgo
-     * @see https://bugs.mojang.com/browse/MC-47636
-     */
-    public ModelRenderer noWater;
-    private final int patchList = GLAllocation.generateDisplayLists(1);
-
-    public ModelBoat()
-    {
-        this.boatSides[0] = (new ModelRenderer(this, 0, 0)).setTextureSize(128, 64);
-        this.boatSides[1] = (new ModelRenderer(this, 0, 19)).setTextureSize(128, 64);
-        this.boatSides[2] = (new ModelRenderer(this, 0, 27)).setTextureSize(128, 64);
-        this.boatSides[3] = (new ModelRenderer(this, 0, 35)).setTextureSize(128, 64);
-        this.boatSides[4] = (new ModelRenderer(this, 0, 43)).setTextureSize(128, 64);
-        int i = 32;
-        int j = 6;
-        int k = 20;
-        int l = 4;
-        int i1 = 28;
-        this.boatSides[0].addBox(-14.0F, -9.0F, -3.0F, 28, 16, 3, 0.0F);
-        this.boatSides[0].setRotationPoint(0.0F, 3.0F, 1.0F);
-        this.boatSides[1].addBox(-13.0F, -7.0F, -1.0F, 18, 6, 2, 0.0F);
-        this.boatSides[1].setRotationPoint(-15.0F, 4.0F, 4.0F);
-        this.boatSides[2].addBox(-8.0F, -7.0F, -1.0F, 16, 6, 2, 0.0F);
-        this.boatSides[2].setRotationPoint(15.0F, 4.0F, 0.0F);
-        this.boatSides[3].addBox(-14.0F, -7.0F, -1.0F, 28, 6, 2, 0.0F);
-        this.boatSides[3].setRotationPoint(0.0F, 4.0F, -9.0F);
-        this.boatSides[4].addBox(-14.0F, -7.0F, -1.0F, 28, 6, 2, 0.0F);
-        this.boatSides[4].setRotationPoint(0.0F, 4.0F, 9.0F);
-        this.boatSides[0].rotateAngleX = ((float)Math.PI / 2F);
-        this.boatSides[1].rotateAngleY = ((float)Math.PI * 3F / 2F);
-        this.boatSides[2].rotateAngleY = ((float)Math.PI / 2F);
-        this.boatSides[3].rotateAngleY = (float)Math.PI;
-        this.paddles[0] = this.makePaddle(true);
-        this.paddles[0].setRotationPoint(3.0F, -5.0F, 9.0F);
-        this.paddles[1] = this.makePaddle(false);
-        this.paddles[1].setRotationPoint(3.0F, -5.0F, -9.0F);
-        this.paddles[1].rotateAngleY = (float)Math.PI;
-        this.paddles[0].rotateAngleZ = 0.19634955F;
-        this.paddles[1].rotateAngleZ = 0.19634955F;
-        this.noWater = (new ModelRenderer(this, 0, 0)).setTextureSize(128, 64);
-        this.noWater.addBox(-14.0F, -9.0F, -3.0F, 28, 16, 3, 0.0F);
-        this.noWater.setRotationPoint(0.0F, -3.0F, 1.0F);
-        this.noWater.rotateAngleX = ((float)Math.PI / 2F);
-    }
-
-    /**
-     * Sets the models various rotation angles then renders the model.
-     */
-    public void render(Entity entityIn, float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scale)
-    {
-        GlStateManager.rotate(90.0F, 0.0F, 1.0F, 0.0F);
-        EntityBoat entityboat = (EntityBoat)entityIn;
-        this.setRotationAngles(limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch, scale, entityIn);
-
-        for (int i = 0; i < 5; ++i)
-        {
-            this.boatSides[i].render(scale);
-        }
-
-        this.renderPaddle(entityboat, 0, scale, limbSwing);
-        this.renderPaddle(entityboat, 1, scale, limbSwing);
-    }
-
-    public void renderMultipass(Entity p_187054_1_, float p_187054_2_, float p_187054_3_, float p_187054_4_, float p_187054_5_, float p_187054_6_, float scale)
-    {
-        GlStateManager.rotate(90.0F, 0.0F, 1.0F, 0.0F);
-        GlStateManager.colorMask(false, false, false, false);
-        this.noWater.render(scale);
-        GlStateManager.colorMask(true, true, true, true);
-    }
-
-    protected ModelRenderer makePaddle(boolean p_187056_1_)
-    {
-        ModelRenderer modelrenderer = (new ModelRenderer(this, 62, p_187056_1_ ? 0 : 20)).setTextureSize(128, 64);
-        int i = 20;
-        int j = 7;
-        int k = 6;
-        float f = -5.0F;
-        modelrenderer.addBox(-1.0F, 0.0F, -5.0F, 2, 2, 18);
-        modelrenderer.addBox(p_187056_1_ ? -1.001F : 0.001F, -3.0F, 8.0F, 1, 6, 7);
-        return modelrenderer;
-    }
-
-    protected void renderPaddle(EntityBoat boat, int paddle, float scale, float limbSwing)
-    {
-        float f = boat.getRowingTime(paddle, limbSwing);
-        ModelRenderer modelrenderer = this.paddles[paddle];
-        modelrenderer.rotateAngleX = (float)MathHelper.clampedLerp(-1.0471975803375244D, -0.2617993950843811D, (double)((MathHelper.sin(-f) + 1.0F) / 2.0F));
-        modelrenderer.rotateAngleY = (float)MathHelper.clampedLerp(-(Math.PI / 4D), (Math.PI / 4D), (double)((MathHelper.sin(-f + 1.0F) + 1.0F) / 2.0F));
-
-        if (paddle == 1)
-        {
-            modelrenderer.rotateAngleY = (float)Math.PI - modelrenderer.rotateAngleY;
-        }
+import java.awt.*;
+import java.util.UUID;
 
-        modelrenderer.render(scale);
-    }
+public class ModelBoat extends ModelBase implements IMultipassModel {
+	public ModelRenderer[] boatSides = new ModelRenderer[5];
+	public ModelRenderer[] paddles = new ModelRenderer[2];
+
+	/**
+	 * An invisible layer that is rendered to make it seem like there's no water in the boat.
+	 *
+	 * @see https://redd.it/3qufgo
+	 * @see https://bugs.mojang.com/browse/MC-47636
+	 */
+	public ModelRenderer noWater;
+	private final int patchList = GLAllocation.generateDisplayLists(1);
+
+	public ModelBoat() {
+		this.boatSides[0] = (new ModelRenderer(this, 0, 0)).setTextureSize(128, 64);
+		this.boatSides[1] = (new ModelRenderer(this, 0, 19)).setTextureSize(128, 64);
+		this.boatSides[2] = (new ModelRenderer(this, 0, 27)).setTextureSize(128, 64);
+		this.boatSides[3] = (new ModelRenderer(this, 0, 35)).setTextureSize(128, 64);
+		this.boatSides[4] = (new ModelRenderer(this, 0, 43)).setTextureSize(128, 64);
+		int i = 32;
+		int j = 6;
+		int k = 20;
+		int l = 4;
+		int i1 = 28;
+		this.boatSides[0].addBox(-14.0F, -9.0F, -3.0F, 28, 16, 3, 0.0F);
+		this.boatSides[0].setRotationPoint(0.0F, 3.0F, 1.0F);
+		this.boatSides[1].addBox(-13.0F, -7.0F, -1.0F, 18, 6, 2, 0.0F);
+		this.boatSides[1].setRotationPoint(-15.0F, 4.0F, 4.0F);
+		this.boatSides[2].addBox(-8.0F, -7.0F, -1.0F, 16, 6, 2, 0.0F);
+		this.boatSides[2].setRotationPoint(15.0F, 4.0F, 0.0F);
+		this.boatSides[3].addBox(-14.0F, -7.0F, -1.0F, 28, 6, 2, 0.0F);
+		this.boatSides[3].setRotationPoint(0.0F, 4.0F, -9.0F);
+		this.boatSides[4].addBox(-14.0F, -7.0F, -1.0F, 28, 6, 2, 0.0F);
+		this.boatSides[4].setRotationPoint(0.0F, 4.0F, 9.0F);
+		this.boatSides[0].rotateAngleX = ((float) Math.PI / 2F);
+		this.boatSides[1].rotateAngleY = ((float) Math.PI * 3F / 2F);
+		this.boatSides[2].rotateAngleY = ((float) Math.PI / 2F);
+		this.boatSides[3].rotateAngleY = (float) Math.PI;
+		this.paddles[0] = this.makePaddle(true);
+		this.paddles[0].setRotationPoint(3.0F, -5.0F, 9.0F);
+		this.paddles[1] = this.makePaddle(false);
+		this.paddles[1].setRotationPoint(3.0F, -5.0F, -9.0F);
+		this.paddles[1].rotateAngleY = (float) Math.PI;
+		this.paddles[0].rotateAngleZ = 0.19634955F;
+		this.paddles[1].rotateAngleZ = 0.19634955F;
+		this.noWater = (new ModelRenderer(this, 0, 0)).setTextureSize(128, 64);
+		this.noWater.addBox(-14.0F, -9.0F, -3.0F, 28, 16, 3, 0.0F);
+		this.noWater.setRotationPoint(0.0F, -3.0F, 1.0F);
+		this.noWater.rotateAngleX = ((float) Math.PI / 2F);
+	}
+
+	/**
+	 * Sets the models various rotation angles then renders the model.
+	 */
+	public void render(Entity entityIn, float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scale) {
+		GlStateManager.rotate(90.0F, 0.0F, 1.0F, 0.0F);
+		EntityBoat entityboat = (EntityBoat) entityIn;
+		this.setRotationAngles(limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch, scale, entityIn);
+
+		for (int i = 0; i < 5; ++i) {
+			this.boatSides[i].render(scale);
+		}
+
+		this.renderPaddle(entityboat, 0, scale, limbSwing);
+		this.renderPaddle(entityboat, 1, scale, limbSwing);
+	}
+
+	public void renderMultipass(Entity p_187054_1_, float p_187054_2_, float p_187054_3_, float p_187054_4_, float p_187054_5_, float p_187054_6_, float scale) {
+		GlStateManager.rotate(90.0F, 0.0F, 1.0F, 0.0F);
+		GlStateManager.colorMask(false, false, false, false);
+		this.noWater.render(scale);
+		GlStateManager.colorMask(true, true, true, true);
+	}
+
+	protected ModelRenderer makePaddle(boolean p_187056_1_) {
+		ModelRenderer modelrenderer = (new ModelRenderer(this, 62, p_187056_1_ ? 0 : 20)).setTextureSize(128, 64);
+		int i = 20;
+		int j = 7;
+		int k = 6;
+		float f = -5.0F;
+		modelrenderer.addBox(-1.0F, 0.0F, -5.0F, 2, 2, 18);
+		modelrenderer.addBox(p_187056_1_ ? -1.001F : 0.001F, -3.0F, 8.0F, 1, 6, 7);
+		return modelrenderer;
+	}
+
+	protected void renderPaddle(EntityBoat boat, int paddle, float scale, float limbSwing) {
+
+		float f = boat.getRowingTime(paddle, limbSwing);
+
+		ModelRenderer modelrenderer = this.paddles[paddle];
+
+		Vec3d rArm = null;
+		Vec3d lArm = null;
+		
+		if (boat.getControllingPassenger() instanceof EntityPlayer) {
+			UUID playerId = ((EntityPlayer) boat.getControllingPassenger()).getGameProfile().getId();
+			if (Minecraft.getMinecraft().player.getUniqueID().equals(playerId)) {
+				lArm = MCOpenVR.controllerHistory[1].averagePosition(0.1);
+				rArm = MCOpenVR.controllerHistory[0].averagePosition(0.1);
+			} else {
+				PlayerModelController.RotInfo rotInfo = PlayerModelController.getInstance().getRotationsForPlayer(playerId);
+				if (rotInfo != null) {
+					rArm = rotInfo.rightArmPos;
+					lArm = rotInfo.leftArmPos;
+				}
+			}
+		}
+
+		if (rArm != null && lArm != null && Minecraft.getMinecraft().rowTracker.isActive(Minecraft.getMinecraft().player)) {
+			//Debug debug=new Debug(boat.getPositionVector());
+			//Attachment point converted from Model coordinates to boat-relative World coordinates
+			Vec3d attachmentPoint = new Vec3d(paddles[paddle].rotationPointZ * scale, (paddles[paddle].rotationPointY + 15) * scale, paddles[paddle].rotationPointX * scale);
+
+			Vec3d arm = paddle == 0 ? lArm : rArm;
+
+			Quaternion boatRot = new Quaternion(boat.rotationPitch, -boat.rotationYaw, 0).normalized();
+			Quaternion worldRot = new Quaternion(0, VRSettings.inst.vrWorldRotation, 0);
+
+			Vec3d attachAbs = boat.getPositionVector().add(boatRot.multiply(attachmentPoint));
+			Vec3d armAbs = OpenVRPlayer.get().roomOrigin.add(worldRot.multiply(arm));
+
+			Vec3d armToPaddle = attachAbs.subtract(armAbs);
+
+
+			Vector3 checkDir = paddle == 0 ? new Vector3(1, 0, 0) : new Vector3(-1, 0, 0);
+			Quaternion toForward=Quaternion.createFromToVector(checkDir,new Vector3(0,0,1));
+
+			Quaternion rotation = Quaternion.createFromToVector(new Vector3(0,0,1), new Vector3(toForward.multiply(boatRot.inverse().multiply(armToPaddle.normalize()))));
+
+			float mult = paddle == 0 ? -1 : 1;
+
+			Color c=paddle==0? Color.red: Color.green;
+
+			modelrenderer.rotateAngleX = (float) ( -Math.toRadians( rotation.toEuler().getPitch()));
+			modelrenderer.rotateAngleY = (float) ( mult * Math.toRadians( rotation.toEuler().getYaw()));
+			modelrenderer.rotateAngleZ = 0;
+
+
+		} else {
+			modelrenderer.rotateAngleX = (float) MathHelper.clampedLerp(-1.0471975803375244D, -0.2617993950843811D, (double) ((MathHelper.sin(-f) + 1.0F) / 2.0F));
+			modelrenderer.rotateAngleY = (float) MathHelper.clampedLerp(-(Math.PI / 4D), (Math.PI / 4D), (double) ((MathHelper.sin(-f + 1.0F) + 1.0F) / 2.0F));
+		}
+
+		if (paddle == 1) {
+			modelrenderer.rotateAngleY = (float) Math.PI - modelrenderer.rotateAngleY;
+		}
+
+		modelrenderer.render(scale);
+	}
 }
