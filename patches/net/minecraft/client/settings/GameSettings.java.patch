--- a/net/minecraft/client/settings/GameSettings.java
+++ b/net/minecraft/client/settings/GameSettings.java
@@ -62,6 +62,7 @@
 import org.lwjgl.input.Mouse;
 import org.lwjgl.opengl.Display;
 import org.lwjgl.opengl.DisplayMode;
+import org.vivecraft.provider.MCOpenVR;
 
 public class GameSettings
 {
@@ -114,7 +115,7 @@
     public float chatOpacity = 1.0F;
     public boolean snooperEnabled = true;
     public boolean fullScreen;
-    public boolean enableVsync = true;
+    public boolean enableVsync = false;
     public boolean useVbo = true;
     public boolean reducedDebugInfo;
     public boolean hideServerAddress;
@@ -144,7 +145,7 @@
     public boolean enableWeakAttacks;
     public boolean showSubtitles;
     public boolean realmsNotifications = true;
-    public boolean autoJump = true;
+    public boolean autoJump = false;
     public TutorialSteps tutorialStep = TutorialSteps.MOVEMENT;
     public KeyBinding keyBindForward = new KeyBinding("key.forward", 17, "key.categories.movement");
     public KeyBinding keyBindLeft = new KeyBinding("key.left", 30, "key.categories.movement");
@@ -195,6 +196,7 @@
 
     /** GUI scale */
     public int guiScale;
+    public int guiScaleUser;
 
     /** Determines amount of particles. 0 = All, 1 = Decreased, 2 = Minimal */
     public int particleSetting;
@@ -230,7 +232,7 @@
     public boolean ofStars = true;
     public boolean ofSunMoon = true;
     public int ofVignette = 0;
-    public int ofChunkUpdates = 1;
+    public int ofChunkUpdates = 5;
     public boolean ofChunkUpdatesDynamic = false;
     public int ofTime = 0;
     public boolean ofClearWater = false;
@@ -252,7 +254,7 @@
     public int ofTranslucentBlocks = 0;
     public boolean ofDynamicFov = true;
     public boolean ofAlternateBlocks = true;
-    public int ofDynamicLights = 3;
+    public int ofDynamicLights = 2;
     public boolean ofCustomEntityModels = true;
     public boolean ofCustomGuis = true;
     public boolean ofShowGlErrors = true;
@@ -294,6 +296,7 @@
     {
         this.setForgeKeybindProperties();
         this.keyBindings = (KeyBinding[])ArrayUtils.addAll(new KeyBinding[] {this.keyBindAttack, this.keyBindUseItem, this.keyBindForward, this.keyBindLeft, this.keyBindBack, this.keyBindRight, this.keyBindJump, this.keyBindSneak, this.keyBindSprint, this.keyBindDrop, this.keyBindInventory, this.keyBindChat, this.keyBindPlayerList, this.keyBindPickBlock, this.keyBindCommand, this.keyBindScreenshot, this.keyBindTogglePerspective, this.keyBindSmoothCamera, this.keyBindFullscreen, this.keyBindSpectatorOutlines, this.keyBindSwapHands, this.keyBindSaveToolbar, this.keyBindLoadToolbar, this.keyBindAdvancements}, this.keyBindsHotbar);
+        this.keyBindings = MCOpenVR.initializeBindings(this.keyBindings);
         this.difficulty = EnumDifficulty.NORMAL;
         this.lastServer = "";
         this.fovSetting = 70.0F;
@@ -472,7 +475,7 @@
                 this.mc.getTextureMapBlocks().setMipmapLevels(this.mipmapLevels);
                 this.mc.getTextureManager().bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
                 this.mc.getTextureMapBlocks().setBlurMipmapDirect(false, this.mipmapLevels > 0);
-                this.mc.scheduleResourcesRefresh();
+                this.needsResourceRefresh = true; // FORGE: fix for MC-64581 very laggy mipmap slider
             }
         }
 
@@ -507,11 +510,11 @@
 
         if (settingsOption == GameSettings.Options.GUI_SCALE)
         {
-            this.guiScale += value;
+            this.guiScaleUser += value;
 
             if (GuiScreen.isShiftKeyDown())
             {
-                this.guiScale = 0;
+                this.guiScaleUser = 0;
             }
 
             DisplayMode displaymode = Config.getLargestDisplayMode();
@@ -519,19 +522,19 @@
             int j = displaymode.getHeight() / 240;
             int k = Math.min(i, j);
 
-            if (this.guiScale < 0)
+            if (this.guiScaleUser < 0)
             {
-                this.guiScale = k - 1;
+                this.guiScaleUser = k - 1;
             }
 
-            if (this.mc.isUnicode() && this.guiScale % 2 != 0)
+            if (this.mc.isUnicode() && this.guiScaleUser % 2 != 0)
             {
-                this.guiScale += value;
+                this.guiScaleUser += value;
             }
 
-            if (this.guiScale < 0 || this.guiScale >= k)
+            if (this.guiScaleUser < 0 || this.guiScaleUser >= k)
             {
-                this.guiScale = 0;
+                this.guiScaleUser = 0;
             }
         }
 
@@ -942,7 +945,7 @@
             }
             else if (settingOption == GameSettings.Options.GUI_SCALE)
             {
-                return this.guiScale >= GUISCALES.length ? s1 + this.guiScale + "x" : s1 + getTranslation(GUISCALES, this.guiScale);
+                return this.guiScaleUser >= GUISCALES.length ? s1 + this.guiScaleUser + "x" : s1 + getTranslation(GUISCALES, this.guiScaleUser);
             }
             else if (settingOption == GameSettings.Options.CHAT_VISIBILITY)
             {
@@ -1056,7 +1059,7 @@
 
                             if ("guiScale".equals(s1))
                             {
-                                this.guiScale = Integer.parseInt(s2);
+                                this.guiScaleUser = Integer.parseInt(s2);
                             }
 
                             if ("particles".equals(s1))
@@ -1475,7 +1478,7 @@
             printwriter.println("gamma:" + this.gammaSetting);
             printwriter.println("saturation:" + this.saturation);
             printwriter.println("renderDistance:" + this.renderDistanceChunks);
-            printwriter.println("guiScale:" + this.guiScale);
+            printwriter.println("guiScale:" + this.guiScaleUser);
             printwriter.println("particles:" + this.particleSetting);
             printwriter.println("bobView:" + this.viewBobbing);
             printwriter.println("anaglyph3d:" + this.anaglyph);
@@ -2058,7 +2061,7 @@
         {
             ++this.ofChunkUpdates;
 
-            if (this.ofChunkUpdates > 5)
+            if (this.ofChunkUpdates > 15)
             {
                 this.ofChunkUpdates = 1;
             }
@@ -2168,18 +2171,18 @@
 
         if (p_setOptionValueOF_1_ == GameSettings.Options.FAST_RENDER)
         {
-            if (!this.ofFastRender && Config.isShaders())
-            {
-                Config.showGuiMessage(Lang.get("of.message.fr.shaders1"), Lang.get("of.message.fr.shaders2"));
-                return;
-            }
+//            if (!this.ofFastRender && Config.isShaders())
+//            {
+//                Config.showGuiMessage(Lang.get("of.message.fr.shaders1"), Lang.get("of.message.fr.shaders2"));
+//                return;
+//            }
 
             this.ofFastRender = !this.ofFastRender;
 
-            if (this.ofFastRender)
-            {
-                this.mc.entityRenderer.stopUseShader();
-            }
+//            if (this.ofFastRender)
+//            {
+//                this.mc.entityRenderer.stopUseShader();
+//            }
 
             Config.updateFramebufferSize();
         }
@@ -3069,7 +3072,7 @@
                     if (astring[0].equals("ofChunkUpdates") && astring.length >= 2)
                     {
                         this.ofChunkUpdates = Integer.valueOf(astring[1]).intValue();
-                        this.ofChunkUpdates = Config.limit(this.ofChunkUpdates, 1, 5);
+                        this.ofChunkUpdates = Config.limit(this.ofChunkUpdates, 1, 15);
                     }
 
                     if (astring[0].equals("ofChunkUpdatesDynamic") && astring.length >= 2)
@@ -3220,13 +3223,13 @@
 
                     if (astring[0].equals("ofFastMath") && astring.length >= 2)
                     {
-                        this.ofFastMath = Boolean.valueOf(astring[1]).booleanValue();
+                        this.ofFastMath = false;//Boolean.valueOf(astring[1]).booleanValue();
                         MathHelper.fastMath = this.ofFastMath;
                     }
 
                     if (astring[0].equals("ofFastRender") && astring.length >= 2)
                     {
-                        this.ofFastRender = Boolean.valueOf(astring[1]).booleanValue();
+                        this.ofFastRender = false;//Boolean.valueOf(astring[1]).booleanValue();
                     }
 
                     if (astring[0].equals("ofTranslucentBlocks") && astring.length >= 2)
@@ -3250,6 +3253,14 @@
             KeyUtils.fixKeyConflicts(this.keyBindings, new KeyBinding[] {this.ofKeyBindZoom});
             KeyBinding.resetKeyBindingArrayAndHash();
             bufferedreader.close();
+            
+            //Vivecraft important.
+            this.ofFastRender = false;
+            this.fboEnable = true;
+            this.ofAaLevel = 0;
+            this.ofAfLevel = 1;
+            //
+            
         }
         catch (Exception exception11)
         {
@@ -3386,10 +3397,10 @@
         this.clouds = 2;
         this.fovSetting = 70.0F;
         this.gammaSetting = 0.0F;
-        this.guiScale = 0;
+        this.guiScaleUser = 0;
         this.particleSetting = 0;
         this.heldItemTooltips = true;
-        this.useVbo = false;
+        this.useVbo = true;
         this.forceUnicodeFont = false;
         this.ofFogType = 1;
         this.ofFogStart = 0.8F;
@@ -3402,7 +3413,7 @@
         this.ofLazyChunkLoading = false;
         this.ofRenderRegions = false;
         this.ofFastMath = false;
-        this.ofFastRender = false;
+        this.ofFastRender = true;
         this.ofTranslucentBlocks = 0;
         this.ofDynamicFov = true;
         this.ofAlternateBlocks = true;
@@ -3428,7 +3439,7 @@
         this.ofStars = true;
         this.ofSunMoon = true;
         this.ofVignette = 0;
-        this.ofChunkUpdates = 1;
+        this.ofChunkUpdates = 5;
         this.ofChunkUpdatesDynamic = false;
         this.ofTime = 0;
         this.ofClearWater = false;
@@ -3574,6 +3585,7 @@
         }
     }
 
+    //FORGE
     public void onGuiClosed()
     {
         if (this.needsResourceRefresh)
@@ -3582,6 +3594,7 @@
             this.needsResourceRefresh = false;
         }
     }
+    ////
 
     public static enum Options
     {
