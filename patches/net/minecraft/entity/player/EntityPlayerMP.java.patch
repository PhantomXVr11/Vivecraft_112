--- a/net/minecraft/entity/player/EntityPlayerMP.java
+++ b/net/minecraft/entity/player/EntityPlayerMP.java
@@ -2,10 +2,19 @@
 
 import com.google.common.collect.Lists;
 import com.mojang.authlib.GameProfile;
+import org.vivecraft.api.NetworkHelper;
+import org.vivecraft.api.VivePlayer;
+import org.vivecraft.utils.ITeleporterDummy;
+
+import org.vivecraft.utils.MCReflection;
 import io.netty.buffer.Unpooled;
+
+import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Random;
+
 import javax.annotation.Nullable;
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.advancements.PlayerAdvancements;
@@ -21,10 +30,12 @@
 import net.minecraft.entity.EntityList;
 import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.entity.IMerchant;
+import net.minecraft.entity.item.EntityItem;
 import net.minecraft.entity.passive.AbstractHorse;
 import net.minecraft.entity.projectile.EntityArrow;
 import net.minecraft.init.Items;
 import net.minecraft.init.MobEffects;
+import net.minecraft.init.PotionTypes;
 import net.minecraft.init.SoundEvents;
 import net.minecraft.inventory.Container;
 import net.minecraft.inventory.ContainerChest;
@@ -33,6 +44,7 @@
 import net.minecraft.inventory.IContainerListener;
 import net.minecraft.inventory.IInventory;
 import net.minecraft.inventory.SlotCrafting;
+import net.minecraft.item.EnumAction;
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemMapBase;
 import net.minecraft.item.ItemStack;
@@ -68,6 +80,7 @@
 import net.minecraft.network.play.server.SPacketWindowItems;
 import net.minecraft.network.play.server.SPacketWindowProperty;
 import net.minecraft.potion.PotionEffect;
+import net.minecraft.potion.PotionUtils;
 import net.minecraft.scoreboard.IScoreCriteria;
 import net.minecraft.scoreboard.Score;
 import net.minecraft.scoreboard.ScoreObjective;
@@ -76,6 +89,8 @@
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.management.PlayerInteractionManager;
 import net.minecraft.server.management.UserListOpsEntry;
+import net.optifine.reflect.Reflector;
+import net.optifine.reflect.SafeReflector;
 import net.minecraft.stats.RecipeBookServer;
 import net.minecraft.stats.StatBase;
 import net.minecraft.stats.StatList;
@@ -89,6 +104,7 @@
 import net.minecraft.util.EntityDamageSource;
 import net.minecraft.util.EnumHand;
 import net.minecraft.util.EnumHandSide;
+import net.minecraft.util.EnumParticleTypes;
 import net.minecraft.util.NonNullList;
 import net.minecraft.util.ReportedException;
 import net.minecraft.util.ResourceLocation;
@@ -111,6 +127,7 @@
 import net.minecraft.world.ILockableContainer;
 import net.minecraft.world.WorldServer;
 import net.minecraft.world.storage.loot.ILootContainer;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -182,7 +199,7 @@
     /**
      * The currently in use window ID. Incremented every time a window is opened.
      */
-    private int currentWindowId;
+    public int currentWindowId;
 
     /**
      * set to true when player is moving quantity of items from one inventory to another(crafting) but item in either
@@ -201,9 +218,15 @@
         super(worldIn, profile);
         interactionManagerIn.player = this;
         this.interactionManager = interactionManagerIn;
-        BlockPos blockpos = worldIn.getSpawnPoint();
+        BlockPos blockpos = null;
+        
+        //FORGE
+        if(Reflector.forgeExists())
+        	blockpos= (BlockPos) Reflector.call(worldIn.provider, Reflector.ForgeWorldProvider_getRandomizedSpawnPoint);
+        else
+        	blockpos= worldIn.getSpawnPoint();
 
-        if (worldIn.provider.hasSkyLight() && worldIn.getWorldInfo().getGameType() != GameType.ADVENTURE)
+        if (!Reflector.forgeExists() && worldIn.provider.hasSkyLight() && worldIn.getWorldInfo().getGameType() != GameType.ADVENTURE)
         {
             int i = Math.max(0, server.getSpawnRadius(worldIn));
             int j = MathHelper.floor(worldIn.getWorldBorder().getClosestDistance((double)blockpos.getX(), (double)blockpos.getZ()));
@@ -220,7 +243,8 @@
 
             blockpos = worldIn.getTopSolidOrLiquidBlock(blockpos.add(this.rand.nextInt(i * 2 + 1) - i, 0, this.rand.nextInt(i * 2 + 1) - i));
         }
-
+        ///
+        
         this.mcServer = server;
         this.statsFile = server.getPlayerList().getPlayerStatsFile(this);
         this.advancements = server.getPlayerList().getPlayerAdvancements(this);
@@ -231,6 +255,7 @@
         {
             this.setPosition(this.posX, this.posY + 1.0D, this.posZ);
         }
+        
     }
 
     /**
@@ -336,9 +361,24 @@
         this.lastExperience = -1;
     }
 
+    private static Random rand = new Random();
+    
     public void addSelfToInternalCraftingInventory()
     {
-        this.openContainer.addListener(this);
+    	this.openContainer.addListener(this);
+
+    	VivePlayer vp = NetworkHelper.vivePlayers.get(this.getUniqueID());
+    	if(vp!=null && vp.isVR()){
+    		if(rand.nextInt(20) == 3){
+				ItemStack stack;
+    			if (rand.nextInt(2) == 1)
+    				stack = new ItemStack(Items.PUMPKIN_PIE).setStackDisplayName("EAT ME");
+    			else
+					stack = PotionUtils.addPotionToItemStack(new ItemStack(Items.POTIONITEM), PotionTypes.WATER).setStackDisplayName("DRINK ME");
+				if(this.inventory.addItemStackToInventory(stack))
+					this.inventoryContainer.detectAndSendChanges();
+    		}
+    	}
     }
 
     /**
@@ -384,7 +424,8 @@
 
         this.openContainer.detectAndSendChanges();
 
-        if (!this.world.isRemote && !this.openContainer.canInteractWith(this))
+        //FORGE adds nullcheck
+        if (!this.world.isRemote && this.openContainer!=null && !this.openContainer.canInteractWith(this))
         {
             this.closeScreen();
             this.openContainer = this.inventoryContainer;
@@ -535,6 +576,12 @@
      */
     public void onDeath(DamageSource cause)
     {
+    	
+    	if(Reflector.forgeExists()){
+    		if(Reflector.callBoolean(Reflector.ForgeHooks_onLivingDeath, new Object[]{this, cause}))
+    			return;
+    	}
+    	
         boolean flag = this.world.getGameRules().getBoolean("showDeathMessages");
         this.connection.sendPacket(new SPacketCombatEvent(this.getCombatTracker(), SPacketCombatEvent.Event.ENTITY_DIED, flag));
 
@@ -563,8 +610,32 @@
 
         if (!this.world.getGameRules().getBoolean("keepInventory") && !this.isSpectator())
         {
+        	java.util.ArrayList<EntityItem> c = null;
+        
+        	//FORGE
+        	if(Reflector.forgeExists()){
+	        	Reflector.setFieldValue(this, Reflector.ForgeEntity_captureDrops, true);
+	        	c = (ArrayList<EntityItem>) Reflector.getFieldValue(this, Reflector.ForgeEntity_capturedDrops);
+	        	c.clear();
+        	}
+        	///
+        	
             this.destroyVanishingCursedItems();
             this.inventory.dropAllItems();
+
+        	//FORGE
+        	if(Reflector.forgeExists()){
+	        	Reflector.setFieldValue(this, Reflector.ForgeEntity_captureDrops, false);
+	        	Object event = Reflector.newInstance(Reflector.PlayerDropsEvent_Constructor, new Object[]{this, cause, c, this.recentlyHit > 0});
+	        	boolean ret = Reflector.postForgeBusEvent(event);
+	        	if(!ret){
+	        		for (net.minecraft.entity.item.EntityItem item : c)
+	        		{
+	        			this.world.spawnEntity(item);
+	        		}
+	        	}
+        	}
+        	///
         }
 
         for (ScoreObjective scoreobjective : this.world.getScoreboard().getObjectivesFromCriteria(IScoreCriteria.DEATH_COUNT))
@@ -717,6 +788,11 @@
     @Nullable
     public Entity changeDimension(int dimensionIn)
     {
+    	// Let Forge do the thing it wants in Entity
+    	if (Reflector.forgeExists())
+    		return super.changeDimension(dimensionIn);
+    	// otherwise do the vanilla thing
+    	
         this.invulnerableDimensionChange = true;
 
         if (this.dimension == 0 && dimensionIn == -1)
@@ -757,6 +833,54 @@
         }
     }
 
+    //FORGE
+    @Nullable
+    public Entity changeDimension(int dimensionIn, ITeleporterDummy teleporter)
+    {
+    	if (!Reflector.callBoolean(Reflector.ForgeHooks_onTravelToDimension, new Object[]{this, dimensionIn}))
+    		return this;
+    	
+        this.invulnerableDimensionChange = true;
+
+        if (this.dimension == 0 && dimensionIn == -1)
+        {
+            this.enteredNetherPosition = new Vec3d(this.posX, this.posY, this.posZ);
+        }
+        else if (this.dimension != -1 && dimensionIn != 0)
+        {
+            this.enteredNetherPosition = null;
+        }
+
+        if (this.dimension == 1 && dimensionIn == 1 && teleporter.isVanilla())
+        {
+            this.world.removeEntity(this);
+
+            if (!this.queuedEndExit)
+            {
+                this.queuedEndExit = true;
+                this.connection.sendPacket(new SPacketChangeGameState(4, this.seenCredits ? 0.0F : 1.0F));
+                this.seenCredits = true;
+            }
+
+            return this;
+        }
+        else
+        {
+            if (this.dimension == 0 && dimensionIn == 1)
+            {
+                dimensionIn = 1;
+            }
+
+            Reflector.callVoid(this.mcServer.getPlayerList(), SafeReflector.ForgePlayerList_transferPlayerToDimension, this, dimensionIn, teleporter);
+            this.connection.sendPacket(new SPacketEffect(1032, BlockPos.ORIGIN, 0, false));
+            this.lastExperience = -1;
+            this.lastHealth = -1.0F;
+            this.lastFoodLevel = -1;
+            return this;
+        }
+    }
+    //END FORGE
+
     public boolean isSpectatedByPlayer(EntityPlayerMP player)
     {
         if (player.isSpectator())
@@ -893,7 +1017,13 @@
         BlockPos blockpos = new BlockPos(i, j, k);
         IBlockState iblockstate = this.world.getBlockState(blockpos);
 
-        if (iblockstate.getMaterial() == Material.AIR)
+        //FORGE
+        boolean air = iblockstate.getMaterial() == Material.AIR;
+     
+        if(Reflector.forgeExists())
+        	air = Reflector.callBoolean(iblockstate.getBlock(), Reflector.ForgeBlock_isAir, new Object[]{iblockstate, this.world, blockpos});
+        
+        if (air)
         {
             BlockPos blockpos1 = blockpos.down();
             IBlockState iblockstate1 = this.world.getBlockState(blockpos1);
@@ -918,7 +1048,7 @@
     /**
      * get the next window id to use
      */
-    private void getNextWindowId()
+    public void getNextWindowId()
     {
         this.currentWindowId = this.currentWindowId % 100 + 1;
     }
@@ -931,11 +1061,17 @@
         }
         else
         {
-            this.getNextWindowId();
-            this.connection.sendPacket(new SPacketOpenWindow(this.currentWindowId, guiOwner.getGuiID(), guiOwner.getDisplayName()));
-            this.openContainer = guiOwner.createContainer(this.inventory, this);
-            this.openContainer.windowId = this.currentWindowId;
-            this.openContainer.addListener(this);
+        	this.getNextWindowId();
+        	this.connection.sendPacket(new SPacketOpenWindow(this.currentWindowId, guiOwner.getGuiID(), guiOwner.getDisplayName()));
+        	this.openContainer = guiOwner.createContainer(this.inventory, this);
+        	this.openContainer.windowId = this.currentWindowId;
+        	this.openContainer.addListener(this);
+        	//FORGE
+        	if(Reflector.forgeExists()){
+        		Object event = Reflector.newInstance(Reflector.PlayerContainerEventOpen_Constructor, new Object[]{this, this.openContainer});
+        		Reflector.postForgeBusEvent(event);
+        	}
+        	//
         }
     }
 
@@ -982,6 +1118,12 @@
 
             this.openContainer.windowId = this.currentWindowId;
             this.openContainer.addListener(this);
+        	//FORGE
+        	if(Reflector.forgeExists()){
+        		Object event = Reflector.newInstance(Reflector.PlayerContainerEventOpen_Constructor, new Object[]{this, this.openContainer});
+        		Reflector.postForgeBusEvent(event);
+        	}
+        	//
         }
     }
 
@@ -991,6 +1133,12 @@
         this.openContainer = new ContainerMerchant(this.inventory, villager, this.world);
         this.openContainer.windowId = this.currentWindowId;
         this.openContainer.addListener(this);
+    	//FORGE
+    	if(Reflector.forgeExists()){
+    		Object event = Reflector.newInstance(Reflector.PlayerContainerEventOpen_Constructor, new Object[]{this, this.openContainer});
+    		Reflector.postForgeBusEvent(event);
+    	}
+    	//
         IInventory iinventory = ((ContainerMerchant)this.openContainer).getMerchantInventory();
         ITextComponent itextcomponent = villager.getDisplayName();
         this.connection.sendPacket(new SPacketOpenWindow(this.currentWindowId, "minecraft:villager", itextcomponent, iinventory.getSizeInventory()));
@@ -1115,6 +1263,12 @@
     public void closeContainer()
     {
         this.openContainer.onContainerClosed(this);
+    	//FORGE
+    	if(Reflector.forgeExists()){
+    		Object event = Reflector.newInstance(Reflector.PlayerContainerEventClose_Constructor, new Object[]{this, this.openContainer});
+    		Reflector.postForgeBusEvent(event);
+    	}
+    	//
         this.openContainer = this.inventoryContainer;
     }
 
@@ -1143,7 +1297,7 @@
     public void addStat(StatBase stat, int amount)
     {
         if (stat != null)
-        {
+        {       	
             this.statsFile.increaseStat(this, stat, amount);
 
             for (ScoreObjective scoreobjective : this.getWorldScoreboard().getObjectivesFromCriteria(stat.getCriteria()))
@@ -1203,7 +1357,7 @@
     {
         return this.disconnected;
     }
-
+  
     /**
      * this function is called when a players inventory is sent to him, lastHealth is updated on any dimension
      * transitions, then reset.
@@ -1266,6 +1420,23 @@
         this.enteredNetherPosition = that.enteredNetherPosition;
         this.setLeftShoulderEntity(that.getLeftShoulderEntity());
         this.setRightShoulderEntity(that.getRightShoulderEntity());
+
+        if (Reflector.forgeExists()) {
+        	Reflector.setFieldValue(this, Reflector.ForgeEntityPlayer_spawnChunkMap, Reflector.getFieldValue(that, Reflector.ForgeEntityPlayer_spawnChunkMap));
+			Reflector.setFieldValue(this, Reflector.ForgeEntityPlayer_spawnForcedMap, Reflector.getFieldValue(that, Reflector.ForgeEntityPlayer_spawnForcedMap));
+			if (that.dimension != 0) {
+				MCReflection.EntityPlayer_spawnChunk.set(this, MCReflection.EntityPlayer_spawnChunk.get(that));
+				MCReflection.EntityPlayer_spawnForced.set(this, MCReflection.EntityPlayer_spawnForced.get(that));
+			}
+
+			// FORGE: Copy over a section of the Entity Data from the old player.
+			// Allows mods to specify data that persists after players respawn.
+			NBTTagCompound old = (NBTTagCompound)Reflector.call(that, Reflector.ForgeEntity_getEntityData);
+			if (old.hasKey("PlayerPersisted")) {
+				((NBTTagCompound)Reflector.call(this, Reflector.ForgeEntity_getEntityData)).setTag("PlayerPersisted", old.getCompoundTag("PlayerPersisted"));
+			}
+			Reflector.callVoid(Reflector.ForgeEventFactory_onPlayerClone, this, that, !keepEverything);
+		}
     }
 
     protected void onNewPotionEffect(PotionEffect id)
@@ -1611,4 +1782,156 @@
     {
         return this.enteredNetherPosition;
     }
+        
+    @Override
+    public EntityItem dropItem(ItemStack droppedItem, boolean dropAround, boolean traceItem)
+    {
+    	VivePlayer vp = NetworkHelper.vivePlayers.get(this.getUniqueID());
+    	if(vp == null || vp.isVR() == false){
+    		return super.dropItem(droppedItem, dropAround, traceItem);
+    	} else {
+
+    		if (droppedItem.isEmpty())
+    		{
+    			return null;
+    		}
+    		else
+    		{
+    			double d0 = this.posY - 0.30000001192092896D + (double)this.getEyeHeight();
+    			EntityItem entityitem;
+
+
+    			//VIVE use controller
+    			Vec3d pos = vp.getControllerPos(0);    	
+    			Vec3d aim = vp.getControllerDir(0);
+    			
+    			entityitem = new EntityItem(this.world, pos.x + aim.x*0.2f, pos.y+aim.y*0.2f-0.2f, pos.z+aim.z*0.2f, droppedItem);
+    			    			
+    			entityitem.setPickupDelay(40);
+
+    			if (traceItem)
+    			{
+    				entityitem.setThrower(this.getName());
+    			}
+
+    			if (dropAround)
+    			{
+    				float f = this.rand.nextFloat() * 0.5F;
+    				float f1 = this.rand.nextFloat() * ((float)Math.PI * 2F);
+    				entityitem.motionX = (double)(-MathHelper.sin(f1) * f);
+    				entityitem.motionZ = (double)(MathHelper.cos(f1) * f);
+    				entityitem.motionY = 0.20000000298023224D;
+    			}
+    			else
+    			{
+
+    				float f2 = 0.3F;
+
+//    	    		float pitch = (float)Math.toDegrees(Math.asin(aim.y/aim.lengthVector()));
+//    	    		float yaw = (float)Math.toDegrees(Math.atan2(-aim.x, aim.z));   
+    				
+    	    		//vive use controller
+    	    		entityitem.motionX = aim.x * f2;
+    	    		entityitem.motionZ = aim.z * f2;
+    	    		entityitem.motionY = aim.y * f2;
+   				
+        			entityitem.setPosition(entityitem.posX + entityitem.motionX, entityitem.posY+entityitem.motionY, entityitem.posZ + entityitem.motionZ);
+
+    				
+    			}
+
+    			ItemStack itemstack = this.dropItemAndGetStack(entityitem);
+
+    			if (traceItem)
+    			{
+    				if (!itemstack.isEmpty())
+    				{
+    					this.addStat(StatList.getDroppedObjectStats(itemstack.getItem()), droppedItem.getCount());
+    				}
+
+    				this.addStat(StatList.DROP);
+    			}
+
+    			return entityitem;
+    		}
+    	}
+    }
+    
+    @Override
+    public void spawnSweepParticles()
+    {
+    	VivePlayer vp = NetworkHelper.vivePlayers.get(this.getUniqueID());
+    	if(vp==null || vp.isVR() == false){
+    		super.spawnSweepParticles();
+    	} else {
+    		//VIVECRAFT USE CONTROLLER - which controller? have to assume 0.
+
+    		Vec3d aim = vp.getControllerDir(0);
+    		float yaw = (float)Math.toDegrees(Math.atan2(aim.x, -aim.z));   
+
+    		double d0 = (double)(-MathHelper.sin(yaw * 0.017453292F));
+    		double d1 = (double)MathHelper.cos(yaw * 0.017453292F);
+
+    		Vec3d pos= vp.getControllerPos(0);
+
+    		if (this.world instanceof WorldServer) //has to be
+    		{
+    			((WorldServer)this.world).spawnParticle(EnumParticleTypes.SWEEP_ATTACK, pos.x + d0, pos.y , pos.z+ d1, 0, d0, 0.0D, d1, 0.0D, new int[0]);
+    		}
+    		//END
+    	}
+    }
+    
+    @Override
+    protected void updateItemUse(ItemStack stack, int eatingParticleCount)
+    {
+    	VivePlayer vp = NetworkHelper.vivePlayers.get(this.getUniqueID());
+    	if(vp==null || vp.isVR() == false){
+    		super.updateItemUse(stack, eatingParticleCount);;
+    	} else {
+    		if (!stack.isEmpty() && this.isHandActive())
+    		{
+    			if (stack.getItemUseAction() == EnumAction.DRINK)
+    			{
+    				this.playSound(SoundEvents.ENTITY_GENERIC_DRINK, 0.5F, this.world.rand.nextFloat() * 0.1F + 0.9F);
+    			}
+
+    			if (stack.getItemUseAction() == EnumAction.EAT)
+    			{
+    				for (int i = 0; i < eatingParticleCount; ++i)
+    				{
+    					Vec3d vec3d = new Vec3d(((double)this.rand.nextFloat() - 0.5D) * 0.1D, Math.random() * 0.1D + 0.1D, 0.0D);
+    					vec3d = vec3d.rotatePitch(-this.rotationPitch * 0.017453292F);
+    					vec3d = vec3d.rotateYaw(-this.rotationYaw * 0.017453292F);
+    					double d0 = (double)(-this.rand.nextFloat()) * 0.6D - 0.3D;
+    					Vec3d vec3d1 = new Vec3d(((double)this.rand.nextFloat() - 0.5D) * 0.3D, d0, 0.6D);
+    					vec3d1 = vec3d1.rotatePitch(-this.rotationPitch * 0.017453292F);
+    					vec3d1 = vec3d1.rotateYaw(-this.rotationYaw * 0.017453292F);
+
+    					vec3d1 = vec3d1.addVector(this.posX, this.posY + (double)this.getEyeHeight(), this.posZ);
+
+    					//VIVE
+    					EnumHand hand = getActiveHand();
+						if(hand == EnumHand.MAIN_HAND){
+							vec3d1 = vp.getControllerPos(0);             	
+						} else {
+							vec3d1 = vp.getControllerPos(1);             	
+						}
+    					//
+
+    					if (stack.getHasSubtypes())
+    					{
+    						this.world.spawnParticle(EnumParticleTypes.ITEM_CRACK, vec3d1.x, vec3d1.y, vec3d1.z, vec3d.x, vec3d.y + 0.05D, vec3d.z, new int[] {Item.getIdFromItem(stack.getItem()), stack.getMetadata()});
+    					}
+    					else
+    					{
+    						this.world.spawnParticle(EnumParticleTypes.ITEM_CRACK, vec3d1.x, vec3d1.y, vec3d1.z, vec3d.x, vec3d.y + 0.05D, vec3d.z, new int[] {Item.getIdFromItem(stack.getItem())});
+    					}
+    				}
+
+    				this.playSound(SoundEvents.ENTITY_GENERIC_EAT, 0.5F + 0.5F * (float)this.rand.nextInt(2), (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
+    			}
+    		}
+    	}
+    }
 }
